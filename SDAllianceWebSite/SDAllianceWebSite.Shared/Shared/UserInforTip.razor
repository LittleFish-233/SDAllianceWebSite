@inject HttpClient Http
@inject ToastService? ToastService
@inject NavigationManager NavigationManager

<div class=" rounded shadow  bg-opacity pb-1 mb-3">
    @if(isRead)
            {
  <div class="row">
        <img src="@Model.BackgroundImage" class="col-12" @onclick="OnUserClick" style="cursor: pointer">
        <img src="@Model.PhotoPath" style="        border-radius: 50%;
        width: @(Length+"px");
        height: @(Length+"px");
        margin-top: @("-"+Length/2+"px");
        z-index: 1;
        padding: 0px;
        margin-left: auto;
        margin-right: auto;
        cursor: pointer" @onclick="OnUserClick">

    </div>
    <h4 class="text-center mt-2 fw-bold">@Model.UserName</h4>
    <p class="text-center ms-2 me-2" style="font-size: 13px;">@Model.PersonalSignature</p>
            }
            else
            {<div class="p-4">
    <SkeletonParagraph />
    <div class="mt-2">
    </div>
    <SkeletonParagraph />
</div>
              
            }
  
</div>

@code {
    bool isRead = false;

    public UserInforViewModel Model { get; set; }

    [Parameter]
    public int Length { get; set; } = 75;

    [Parameter]
    public EventCallback<NavigateModel> OnClickUrl { get; set; }

    [Parameter]
    public string UserId { get; set; }

    public async Task Refresh(string id)
    {
        UserId = id;
        await OnInitializedAsync();
    }

    public void OnUserClick()
    {
        if(Model!=null)
        {
            OnClickUrl.InvokeAsync(new NavigateModel
            {
                Icon = "fa fa-star-o",
                Title = Model.UserName,
                Url = "/space/index/" + Model.Id
            });
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if(string.IsNullOrWhiteSpace(UserId))
            {
                return;
            }
            Model = await Http.GetFromJsonAsync<UserInforViewModel>(ToolHelper.WebApiPath + "api/space/GetUserData/" + UserId);
            isRead = true;
            StateHasChanged();
        }
        catch
        {
            await ToastService.Error("获取用户信息失败", "未知错误，请在确保网络正常后联系开发人员");
        }
    }

}

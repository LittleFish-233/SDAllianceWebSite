@page "/admin/listbackuparchives"
@attribute [Authorize(Roles = "Admin")]
@inject IAuthService AuthService
@inject HttpClient Http
@inject ToastService? ToastService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS


<Title Text="SDAlliance_软萌"></Title>


<div class="">
    <div class="" style="padding-right: 0;padding-left: 0;">
        <div class="  rounded shadow  bg-opacity p-3">
            <h3 class="fw-bold text-center">互联网档案馆备份版块</h3>
            <p class="text-center" style="color: gray;margin-top:20px">
                <i class="fa fa-close fa-fw "></i>
                <span class="article-infor-text">@(""+InforModel.IsLastFail + "个备份失败")</span>&nbsp;&nbsp;&nbsp;


                <i class="fa fa-chrome fa-fw "></i>
                <span class="article-infor-text">@("总计"+InforModel.All + "个备份")</span>

            </p>
        </div>

        <div class="mt-3" style="padding-right: 0;padding-left: 0;">
            <div class=" rounded shadow -lg p-4 bg-opacity">
                <Table TItem="ListBackUpArchiveAloneModel" IsPagination="true" PageItemsSource="@PageItems" OnQueryAsync="@OnQueryBasicAsync" SearchModel="@searchModel" ShowSearch="true" @ref="TableRows"
                       ShowExtendButtons="true" ExtendButtonColumnWidth="70" SelectedRows="@SelectedRows" IsMultipleSelect="true" IsStriped=true IsAutoRefresh="@IsAutoRefresh"
                       ShowExportButton="true" ShowToolbar="true" ShowDefaultButtons="false" FixedExtendButtonsColumn="true">
                    <TableToolbarTemplate>
                        <TableToolbarButton TItem="ListBackUpArchiveAloneModel" Color="Color.Info" Icon="fa fa-paper-plane" Text="执行" OnClickCallback="OnRunClick" IsAsync="true" />
                        <TableToolbarButton TItem="ListBackUpArchiveAloneModel" Color="Color.Primary" Icon="fa fa-spin fa-spinner fa-fw" Text="切换自动刷新" OnClickCallback="ClickIsAutoRefresh" />
                    </TableToolbarTemplate>
                    <TableColumns>
                        <TableColumn @bind-Field="@context.Id" Sortable="true" DefaultSort="true" DefaultSortOrder="@SortOrder.Desc" Fixed="true" Width="80" />
                        <TableColumn @bind-Field="@context.LastBackUpTime" Sortable="true" Width="200" AllowTextWrap="true" />
                        <TableColumn @bind-Field="@context.LastTimeUsed" Sortable="true" Width="100" AllowTextWrap="true" FormatString="0.0" />
                        <TableColumn @bind-Field="@context.IsLastFail" Sortable="true" ComponentType="@typeof(Switch)" Width="110" />

                        <TableColumn @bind-Field="@context.ArticleId" Searchable="true" Sortable="true" Width="150" />
                    </TableColumns>
                    <RowButtonTemplate>
                        <TableCellButton Size="Size.ExtraSmall" Color="Color.Info" Icon="fa fa-paper-plane" Text="执行" IsAsync="true" OnClickCallback="@(() => OnRowRunClick( new long[] { context.Id } ,true))" />
                    </RowButtonTemplate>
                </Table>
            </div>
        </div>

    </div>

</div>
@code {
    [NotNull]
    private Table<ListBackUpArchiveAloneModel>? TableRows { get; set; }
    private List<ListBackUpArchiveAloneModel> SelectedRows { get; set; } = new();

    public ListBackUpArchivesInforViewModel InforModel { get; set; } = new ListBackUpArchivesInforViewModel();
    public ListBackUpArchivesViewModel ListModel { get; set; } = new ListBackUpArchivesViewModel { BackUpArchives = new List<ListBackUpArchiveAloneModel>() };

    private ListBackUpArchiveAloneModel searchModel { get; set; } = new ListBackUpArchiveAloneModel();

    private IEnumerable<int> PageItems => new int[] { 10, 20, 40, 80, 200, 5000 };
    private bool IsAutoRefresh { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            InforModel = await Http.GetFromJsonAsync<ListBackUpArchivesInforViewModel>(ToolHelper.WebApiPath + "api/BackUpArchives/listBackUpArchives");
        }
        catch
        {
            await ToastService.Error("无法获取互联网档案馆备份信息数据", "未知异常，请在确保网络正常后联系开发人员");
        }

    }

    private async Task<QueryData<ListBackUpArchiveAloneModel>> OnQueryBasicAsync(QueryPageOptions options)
    {
        try
        {
            options.Filters = new List<IFilterAction>();
            options.Searchs = new List<IFilterAction>();

            var result = await Http.PostAsJsonAsync<BackUpArchivesPagesInfor>(ToolHelper.WebApiPath + "api/BackUpArchives/GetBackUpArchiveList", new BackUpArchivesPagesInfor { SearchModel = searchModel, Options = options });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            return JsonSerializer.Deserialize<QueryData<ListBackUpArchiveAloneModel>>(jsonContent, ToolHelper.options);
        }
        catch (Exception exc)
        {
            await ToastService.Error("无法获取互联网档案馆备份信息列表", "未知异常，请在确保网络正常后联系开发人员");
            return new QueryData<ListBackUpArchiveAloneModel>();
        }
    }

    private async Task OnRowRunClick(long[] ids, bool showMessage)
    {
        //调用API
        try
        {
            var result = await Http.PostAsJsonAsync<RunBackUpArchiveModel>(ToolHelper.WebApiPath + "api/BackUpArchives/RunBackUpArchive", new RunBackUpArchiveModel { Ids = ids });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            var obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);

            if (obj.Successful == false)
            {
                await ToastService.Error("执行备份失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success("执行备份成功", "执行备份成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch (Exception exc)
        {
            await ToastService.Error("执行备份失败", "未知异常，请在确保网络正常后联系开发人员");
        }
    }

    private async Task OnRunClick(IEnumerable<ListBackUpArchiveAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有执行备份", "请选中备份");
            return;
        }

        await OnRowRunClick(items.Select(s => s.Id).ToArray(), false);

        await ToastService.Success("执行备份成功", "执行备份成功");
        await TableRows.QueryAsync();
    }

    private Task ClickIsAutoRefresh(IEnumerable<ListBackUpArchiveAloneModel> items)
    {
        IsAutoRefresh = !IsAutoRefresh;
        StateHasChanged();
        return Task.CompletedTask;
    }
}

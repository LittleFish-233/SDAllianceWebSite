@page "/admin/edituser/{id}"
@attribute [Authorize(Roles = "Admin")]

@inject HttpClient Http
@inject ExamineService _examineService
@inject ILocalStorageService _localStorage
@inject ToastService? ToastService
@inject IAppHelper _appHelper
@inject NavigationManager NavigationManager

<Title Text="SDAlliance_软萌"></Title>


<div class="">
    <div class="" style="padding-right: 0;padding-left: 0;">
        <div class="alert alert-warning  rounded shadow  rounded" role="alert">
            不建议直接修改用户数据，请尝试和用户沟通后修改
        </div>
        @if (isReady == false)
        {
            <div class="  rounded shadow  bg-opacity  ps-4 pe-4 pt-4 pb-4">
                <h3 class="text-truncate mb-4 fw-bold">编辑基本信息</h3>
                <h5 class="text-truncate mb-4 fw-bold">当前用户：（Id:）</h5>
                <hr>
                <div>
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                </div>
            </div>
            <div class="  rounded shadow  bg-opacity  ps-4 pe-4 pt-4 pb-4">
                <h3 class="text-truncate mb-4 fw-bold">编辑用户主页</h3>
                <hr>

                <div>
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                    <div class="mt-2">
                    </div>
                    <SkeletonParagraph />
                </div>
            </div>
        }
        else
        {
            <ValidateForm Model="@Model" ValidateAllProperties="true" @ref="ComplexForm">
                <div class="  rounded shadow  bg-opacity  ps-4 pe-4 pt-4 pb-4 mb-4">
                    <h3 class="text-truncate mb-4 fw-bold">编辑基本信息</h3>
                    <h5 class="mb-4 fw-bold">当前用户 @Model.UserName：（Id：@Model.Id）</h5>
                    <hr />

                    <div class="row">
                        <div class="col-12 col-md-6 col-lg-4 col-lg-3 mt-2">
                            <div class="card text-black">
                                <img src="@MainImagePath" class="card-img" alt="...">
                                <div class="card-img-overlay">
                                    <ButtonUpload TValue="string" Accept="image/gif, image/jpeg, image/jpg, image/png" IsSingle="true" OnChange="@OnCardUploadMain" OnDelete="@(fileName => Task.FromResult(true))" BrowserButtonText="设置头像"></ButtonUpload>
                                </div>
                            </div>
                        </div>
                        <div class="col-12 col-md-6 col-lg-4 col-lg-3 mt-2">
                            <div class="card text-black">
                                <img src="@BackImagePath" class="card-img" alt="...">
                                <div class="card-img-overlay">
                                    <ButtonUpload TValue="string" Accept="image/gif, image/jpeg, image/jpg, image/png" IsSingle="true" OnChange="@OnCardUploadBack" OnDelete="@(fileName => Task.FromResult(true))" BrowserButtonText="设置背景图"></ButtonUpload>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group mt-4">
                        <div class="row">
                            <div class="form-group col-12  col-sm-6">
                                <BootstrapInput @bind-Value="Model.UserName"></BootstrapInput>
                            </div>
                            <div class="form-group col-12  col-sm-6">
                                <BootstrapInput @bind-Value="Model.Email" type="email" />
                            </div>
                            <div class="form-group col-12 col-sm-6">
                                <DateTimePicker @bind-Value="@Model.Birthday" />
                            </div>
                            <div class="form-group col-12 col-sm-6">
                                <BootstrapInput @bind-Value="Model.Integral" />
                            </div>
                            <div class="form-group col-12 col-sm-6">
                                <BootstrapInput @bind-Value="Model.LearningValue" />
                            </div>
                            <div class="form-group col-12 col-sm-6">
                                <Switch @bind-Value="Model.CanComment" />
                            </div>

                            <div class="form-group col-12 col-sm-6">
                                <Switch @bind-Value="Model.IsShowFavotites" />
                            </div>

                            <div class="form-group col-12">
                                <BootstrapInput @bind-Value="Model.PersonalSignature"></BootstrapInput>
                            </div>
                            @if (isSuper == true)
                            {
                                <div class="form-group col-12">
                                    <CheckboxList @bind-Value="@UseRolesValue" IsDisabled="false" ShowBorder="true" Items="@UseRoles" ShowLabel="true" DisplayText="用户角色"></CheckboxList>
                                </div> }
                            else
                            {
                                <div class="form-group col-12">
                                    <CheckboxList @bind-Value="@UseRolesValue" IsDisabled="true" ShowBorder="true" Items="@UseRoles" ShowLabel="true" DisplayText="用户角色"></CheckboxList>
                                </div>}
                        </div>
                    </div>
                </div>
            </ValidateForm>
            <div class="  rounded shadow  bg-opacity  ps-4 pe-4 pt-4 pb-4 mb-4">
                <h3 class="text-truncate mb-4 fw-bold">编辑用户主页</h3>
                <hr class="mb-4" />

                @if (isReady == true)
                {
                    <MarkdownEditorTip Context="@Model.MainPageContext" @ref="markdownEditorTip"></MarkdownEditorTip>
                }


            </div>
                <div class="  rounded shadow  bg-opacity  ps-4 pe-4 pt-4 pb-4 mb-4">
                    <div>
                        <h3 class="text-truncate mb-4 fw-bold">保存以上用户数据</h3>
                        <hr class="mb-4" />
                        <Button class="m-1" style="width: 100px" @onclick="@(()=> OnSubmit())" IsAsync="true" Color="Color.Success" IsOutline="true">保存</Button>
                    </div>
                </div>
              <EditSpaceCommentsTip Id="@Model.Id" Title="编辑用户空间留言" Type="CommentType.CommentUser"></EditSpaceCommentsTip>
                <SDAllianceWebSite.Shared.Component.Users.EditUserMessagesTip Id="@Model.Id" Title="编辑用户消息"></SDAllianceWebSite.Shared.Component.Users.EditUserMessagesTip>
        }

    </div>
</div>


@code {
    [Parameter]
    public string Id { get; set; }
    private EditUserViewModel Model { get; set; } = new EditUserViewModel();
    private string MainImagePath { get; set; } = ToolHelper.WebApiPath + "images/default/user.png";
    private string BackImagePath { get; set; } = ToolHelper.WebApiPath + "images/default/background.png";
    private List<UploadFile> DefaultFormatFileListMain { get; set; } = new List<UploadFile>();
    [NotNull]
    private ValidateForm? ComplexForm { get; set; }
    List<SelectedItem> UseRoles { get; set; } = new List<SelectedItem>();
    private List<string> UseRolesValue { get; set; } = new List<string>();
    private bool isReady = false;
    bool isSuper = false;

    [NotNull]
    private MarkdownEditorTip? markdownEditorTip;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            Model = await Http.GetFromJsonAsync<EditUserViewModel>(ToolHelper.WebApiPath + "api/admin/edituser/" + Id);
            MainImagePath = Model.PhotoPath;
            BackImagePath = Model.BackgroundPath;
            //设置用户角色
            foreach (var item in Model.Roles)
            {
                UseRoles.Add(new SelectedItem
                {
                    Text = item.Name,
                    Value = item.Name,
                    Active = item.IsSelected
                });
                if (item.IsSelected == true)
                {
                    UseRolesValue.Add(item.Name);
                }
            }

            var userState = await authenticationStateTask;
            var user = userState.User;
            isSuper = user.IsInRole("SuperAdmin");

            isReady = true;
        }
        catch
        {
            await ToastService.Error("无法连接到服务器", "请确保网络正常后联系开发人员");
        }
    }

    private async Task OnSubmit()
    {
        try
        {
            Model.MainPageContext =await markdownEditorTip.GetContext();
            //处理数据
            if (string.IsNullOrWhiteSpace(Model.UserName) || string.IsNullOrWhiteSpace(Model.Email))
            {
                await ToastService.Error("修改用户信息失败", "请填写所有必填项目");
                return;
            }
            if (string.IsNullOrWhiteSpace(Model.MainPageContext))
            {
                await ToastService.Error("修改用户信息失败", "必须填写主页");
                return;
            }
            //检查文本长度
            if (Model.MainPageContext != null && Model.MainPageContext.Length > 100000)
            {
                await ToastService.Error("文本长度超过上限", "强烈建议使用链接显示图片，内嵌图片会导致性能严重下降。请控制文本量，额外的文字可以移动到关联文章中");
                return;
            }
            //处理用户角色
            Model.Roles = new List<UserRolesModel>();
            foreach (var item in UseRoles)
            {
                bool isSelected = false;
                foreach (var infor in UseRolesValue)
                {
                    if (infor == item.Value)
                    {
                        isSelected = true;
                    }
                }
                Model.Roles.Add(new UserRolesModel
                {
                    Name = item.Value,
                    IsSelected = isSelected
                });
            }
            var result = await Http.PostAsJsonAsync<EditUserViewModel>(ToolHelper.WebApiPath + "api/admin/edituser", Model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                if (obj.Error == "该用户的名称与其他用户重复")
                {
                    ComplexForm.SetError<EditUserViewModel>(f => f.UserName, "已经存在该名称的用户");
                }
                if (obj.Error == "该用户的电子邮箱与其他用户重复")
                {
                    ComplexForm.SetError<EditUserViewModel>(f => f.UserName, "已经存在该电子邮箱的用户");
                }

                await ToastService.Error("修改用户信息失败", obj.Error);
            }
            else
            {
                await ToastService.Success("修改用户信息成功", "修改用户信息成功");
                NavigationManager.NavigateTo("/admin/listusers/" + obj.Error,"管理用户", "fa fa-user-circle");
            }
        }
        catch
        {
            await ToastService.Error("修改用户信息失败", "发生了未预料的异常，请联系开发人员");
        }
    }

    private async Task OnCardUploadMain(UploadFile file)
    {
        try
        {
            List<UploadResult> obj = await _appHelper.UploadFilesAsync(new List<IBrowserFile> { file.File }, 15 * 1024 * 1024, 1, ToolHelper.WebApiPath + "api/files/postfile");
            if (obj[0].Uploaded == true)
            {

                MainImagePath = obj[0].FileURL;
                Model.PhotoName = obj[0].FileName;
                file.FileName = obj[0].FileName;
                StateHasChanged();
            }
            else
            {
                await ToastService.Error("主图上传失败", $"<{file.FileName}> " + obj[0].Error);
            }

        }
        catch
        {
            await ToastService.Error("主图上传失败", "图片上传失败，超过1MB的图片请上传到相册，请检查网络正常后联系管理员");
        }
    }

    private async Task OnCardUploadBack(UploadFile file)
    {
        try
        {
            List<UploadResult> obj = await _appHelper.UploadFilesAsync(new List<IBrowserFile> { file.File }, 15 * 1024 * 1024, 1, ToolHelper.WebApiPath + "api/files/postfile");
            if (obj[0].Uploaded == true)
            {

                BackImagePath = obj[0].FileURL;
                Model.BackgroundName = obj[0].FileName;
                file.FileName = obj[0].FileName;
                StateHasChanged();
            }
            else
            {
                await ToastService.Error("背景图上传失败", $"<{file.FileName}> " + obj[0].Error);
            }
        }
        catch
        {
            await ToastService.Error("背景图上传失败", "图片上传失败，超过1MB的图片请上传到相册，请检查网络正常后联系管理员");
        }

    }
}

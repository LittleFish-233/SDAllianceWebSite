@page "/admin/listarticles"
@attribute [Authorize(Roles = "Admin")]

@inject HttpClient Http
@inject IRoleService _roleService
@inject ToastService? ToastService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS


<Title Text="SDAlliance_软萌"></Title>


<div class="">
    <div class="" style="padding-right: 0;padding-left: 0;">
        <div class="  rounded shadow  bg-opacity p-3">
            <h3 class="fw-bold text-center">文章版块</h3>
            <p class="text-center" style="color: gray;margin-top:20px">
                <i class="fa fa-gamepad fa-fw "></i>
                <span class="article-infor-text">@(InforModel.News + "篇动态")</span>&nbsp;&nbsp;&nbsp;

                <i class="fa fa-users fa-fw "></i>
                <span class="article-infor-text">@(InforModel.Notices + "个公告")</span>
                @if (IsSmallScreen)
                {
                    <br /> }
                else
                {
                    <span>&nbsp; &nbsp; &nbsp;</span>}
                <i class="fa fa-star fa-fw "></i>
                <span class="article-infor-text">@(InforModel.Technologies + "篇技术")</span>&nbsp;&nbsp;&nbsp;

                <i class="fa fa-object-group fa-fw "></i>
                <span class="article-infor-text">@(InforModel.Toughts + "篇感想")</span>
                @if (IsSmallScreen)
                {
                    <br /> }
                else
                {
                    <span>&nbsp; &nbsp; &nbsp;</span>}
                <i class="fa fa-unlink fa-fw "></i>
                <span class="article-infor-text">@(InforModel.Interviews + "篇采访")</span>&nbsp;&nbsp;&nbsp;

                <i class="fa fa-unlink fa-fw "></i>
                <span class="article-infor-text">@(InforModel.Hiddens + "篇隐藏文章")</span>
                @if (IsSmallScreen)
                {
                    <br /> }
                else
                {
                    <span>&nbsp; &nbsp; &nbsp;</span>}
                <i class="fa fa-codepen fa-fw "></i>
                <span class="article-infor-text">@("总计"+InforModel.All + "篇文章")</span>

            </p>
        </div>

        <div class="mt-3" style="padding-right: 0;padding-left: 0;">
            <div class=" rounded shadow -lg p-4 bg-opacity">
                <Table TItem="ListArticleAloneModel" IsPagination="true" PageItemsSource="@PageItems" OnQueryAsync="@OnQueryBasicAsync" SearchModel="@SearchModelArticle" ShowSearch="true" @ref="TableRows"
                       ShowExtendButtons="true" ExtendButtonColumnWidth="340" SelectedRows="@SelectedRows" IsMultipleSelect="true" IsStriped=true
                       ShowExportButton="true" ShowToolbar="true" ShowDefaultButtons="false" FixedExtendButtonsColumn="true">
                    <TableToolbarTemplate>
                        <TableToolbarButton TItem="ListArticleAloneModel" Color="Color.Success" Icon="fa fa-pencil" Text="编辑" OnClickCallback="OnEditModel" IsAsync="true" />
                        <TableToolbarButton TItem="ListArticleAloneModel" Color="Color.Primary" Icon="fa fa-arrow-up" Text="增权重" OnClickCallback="OnPriorityUpClick" IsAsync="true" />
                        <TableToolbarButton TItem="ListArticleAloneModel" Color="Color.Success" Icon="fa fa-arrow-down" Text="降权重" OnClickCallback="OnPriorityDownClick" IsAsync="true" />
                        <TableToolbarButton TItem="ListArticleAloneModel" Color="Color.Primary" Icon="fa fa-map-signs" Text="显示" OnClickCallback="OnUnHiddenClick" IsAsync="true" />
                        <TableToolbarButton TItem="ListArticleAloneModel" Color="Color.Success" Icon="fa fa-unlink" Text="隐藏" OnClickCallback="OnHiddenClick" IsAsync="true" />
                        <TableToolbarButton TItem="ListArticleAloneModel" Color="Color.Primary" Icon="fa fa-comments" Text="开启评论" OnClickCallback="OnCanCommentClick" IsAsync="true" />
                        <TableToolbarButton TItem="ListArticleAloneModel" Color="Color.Success" Icon="fa fa-comments-o" Text="关闭评论" OnClickCallback="OnCanNotCommentClick" IsAsync="true" />
                    </TableToolbarTemplate>
                    <TableColumns>
                        <TableColumn @bind-Field="@context.Id" Sortable="true" DefaultSort="true" Fixed="true" Width="60" />
                        <TableColumn @bind-Field="@context.Type" Sortable="true" Searchable="true" Width="80" />
                        <TableColumn @bind-Field="@context.Name" Sortable="true" Searchable="true" AllowTextWrap="true" Width="200" />
                        <TableColumn @bind-Field="@context.BriefIntroduction" Searchable="true" AllowTextWrap="true" Width="400" />
                        <TableColumn @bind-Field="@context.CreateTime" Sortable="true" Width="120" FormatString="yyyy-MM-dd" />
                        <TableColumn @bind-Field="@context.LastEditTime" Sortable="true" Width="120" FormatString="yyyy-MM-dd" />
                        <TableColumn @bind-Field="@context.ReaderCount" Sortable="true" Width="80" />
                        <TableColumn @bind-Field="@context.OriginalAuthor" Sortable="true" Searchable="true" AllowTextWrap="true" Width="200" />
                        <TableColumn @bind-Field="@context.OriginalLink" Sortable="true" Searchable="true" AllowTextWrap="true" Width="200" />
                        <TableColumn @bind-Field="@context.PubishTime" Sortable="true" Width="120" FormatString="yyyy-MM-dd" />

                        <TableColumn @bind-Field="@context.Priority" Sortable="true" Width="120" />
                        <TableColumn @bind-Field="@context.IsHidden" Sortable="true" ComponentType="@typeof(Switch)" Width="110" />
                        <TableColumn @bind-Field="@context.CanComment" Sortable="true" ComponentType="@typeof(Switch)" Width="110" />

                    </TableColumns>
                    <RowButtonTemplate>
                        <TableCellButton Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-map-signs" Text="查看" IsAsync="true" OnClickCallback="@(() => OnRowLookClick( context.Id , context.Name))" />
                        <TableCellButton Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-arrow-up" Text="增权重" IsAsync="true" OnClickCallback="@(() => OnRowEditPriorityClick(new long[] { context.Id }, 1 , true))" />
                        <TableCellButton Size="Size.ExtraSmall" Color="Color.Info" Icon="fa fa-arrow-down" Text="降权重" IsAsync="true" OnClickCallback="@(() => OnRowEditPriorityClick(new long[] { context.Id }, - 1 , true))" />
                        <TableCellButton Size="Size.ExtraSmall" Color="Color.Danger" Icon="fa fa-unlink" Text="切换显示" IsAsync="true" OnClickCallback="@(() => OnRowEditIsHiddenClick(new long[] { context.Id }, !context.IsHidden, true))" />
                        <TableCellButton Size="Size.ExtraSmall" Color="Color.Danger" Icon="fa fa-comments-o" Text="开关评论" IsAsync="true" OnClickCallback="@(() => OnRowEditCanCommentClick(new long[] { context.Id }, !context.CanComment, true))" />
                    </RowButtonTemplate>
                </Table>
            </div>
        </div>

    </div>

</div>

@code {

    [NotNull]
    private Table<ListArticleAloneModel>? TableRows { get; set; }
    private List<ListArticleAloneModel> SelectedRows { get; set; } = new();


    public GetArticleCountModel InforModel { get; set; } = new GetArticleCountModel();
    public PagedResultDto<Article> pagedResultDto = new SDAllianceWebSite.Shared.Application.Dtos.PagedResultDto<Article> { Data = new List<Article>(), CurrentPage = 1, TotalCount = 0 };

    public ListArticlesViewModel ListModel { get; set; } = new ListArticlesViewModel { Articles = new List<ListArticleAloneModel>() };

    private ListArticleAloneModel SearchModelArticle { get; set; } = new ListArticleAloneModel();

    private IEnumerable<int> PageItems => new int[] { 10, 20, 40, 80, 200, 5000 };

    #region 获取屏幕大小

    /// <summary>
    /// 获得/设置 IJSRuntime 实例
    /// </summary>
    [Inject]
    [System.Diagnostics.CodeAnalysis.NotNull]
    public IJSRuntime? JSRuntime { get; set; }



    public bool IsSmallScreen { get; set; }
    public bool IsNormalScreen { get; set; }
    public bool IsLargeScreen { get; set; }


    private JSInterop<ListArticles>? Interop { get; set; }
    /// <summary>
    /// OnAfterRenderAsync 方法
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            Interop = new JSInterop<ListArticles>(JSRuntime);
            await Interop.InvokeVoidAsync(this, null, "bb_layout", nameof(SetCollapsed));
        }
    }

    /// <summary>
    /// 设置侧边栏收缩方法 客户端监控 window.onresize 事件回调此方法
    /// </summary>
    /// <returns></returns>
    [JSInvokable]
    public void SetCollapsed(int width)
    {
        if (IsSmallScreen != (width < 768))
        {
            IsSmallScreen = width < 768;

            StateHasChanged();
        }
        if (IsNormalScreen != (width >= 768 && width < 2000))
        {
            IsNormalScreen = width >= 768 && width < 2000;

            StateHasChanged();
        }
        if (IsLargeScreen != (width >= 2000))
        {
            IsLargeScreen = width >= 2000;

            StateHasChanged();
        }
    }
    #endregion


    protected override async Task OnInitializedAsync()
    {
#if DEBUG
        //Thread.Sleep(10000);
#endif
        try
        {
            InforModel = await Http.GetFromJsonAsync<GetArticleCountModel>(ToolHelper.WebApiPath + "api/articles/getarticlecount");

        }
        catch
        {
            await ToastService.Error("无法获取文章数据", "未知异常，请在确保网络正常后联系开发人员");
        }

    }

    private async Task<QueryData<ListArticleAloneModel>> OnQueryBasicAsync(QueryPageOptions options)
    {
        try
        {
            options.Filters = new List<IFilterAction>();
            options.Searchs = new List<IFilterAction>();

            var result = await Http.PostAsJsonAsync<ArticlesPagesInfor>(ToolHelper.WebApiPath + "api/admin/GetArticleList", new ArticlesPagesInfor { SearchModel = SearchModelArticle, Options = options });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            return JsonSerializer.Deserialize<QueryData<ListArticleAloneModel>>(jsonContent, ToolHelper.options);
        }
        catch (Exception exc)
        {
            await ToastService.Error("无法获取文章列表", "未知异常，请在确保网络正常后联系开发人员");
            return new QueryData<ListArticleAloneModel>();
        }
    }
    private async Task OnRowEditPriorityClick(long[] ids, int plusPriority, bool showMessage)
    {
        //调用API
        try
        {
            var result = await Http.PostAsJsonAsync<EditArticlePriorityViewModel>(ToolHelper.WebApiPath + "api/articles/EditArticlePriority", new EditArticlePriorityViewModel { Ids = ids, PlusPriority = plusPriority });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            var obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            if (obj.Successful == false)
            {
                await ToastService.Error("修改文章权重失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success("修改文章权重成功", "修改文章权重成功");
                    await TableRows.QueryAsync();
                }

            }
        }
        catch
        {
            await ToastService.Error("修改文章权重失败", "未知异常，请在确保网络正常后联系开发人员");
        }

    }


    private async Task OnPriorityUpClick(IEnumerable<ListArticleAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改文章权重", "请选中文章");
            return;
        }

        await OnRowEditPriorityClick(items.Select(s => s.Id).ToArray(), 1, false);
        await ToastService.Success("修改文章权重成功", "修改文章权重成功");
        await TableRows.QueryAsync();
    }
    private async Task OnPriorityDownClick(IEnumerable<ListArticleAloneModel> items)
    {

        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改文章权重", "请选中文章");
            return;
        }

        await OnRowEditPriorityClick(items.Select(s => s.Id).ToArray(), -1, false);

        await ToastService.Success("修改文章权重成功", "修改文章权重成功");
        await TableRows.QueryAsync();
    }

    private async Task OnRowEditIsHiddenClick(long[] ids, bool isHidden, bool showMessage)
    {
        string tempString = isHidden == true ? "隐藏" : "显示";
        //调用API
        try
        {
            var result = await Http.PostAsJsonAsync<HiddenArticleModel>(ToolHelper.WebApiPath + "api/articles/HiddenArticle", new HiddenArticleModel { Ids = ids, IsHidden = isHidden });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            var obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);



            if (obj.Successful == false)
            {
                await ToastService.Error(tempString + "文章失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success(tempString + "文章成功", tempString + "文章成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch
        {
            await ToastService.Error(tempString + "文章失败", "未知异常，请在确保网络正常后联系开发人员");
        }
    }

    private async Task OnHiddenClick(IEnumerable<ListArticleAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改文章显示状态", "请选中文章");
            return;
        }

        await OnRowEditIsHiddenClick(items.Select(s => s.Id).ToArray(), true, false);

        await ToastService.Success("隐藏文章成功", "隐藏词条成功");
        await TableRows.QueryAsync();
    }
    private async Task OnUnHiddenClick(IEnumerable<ListArticleAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改文章显示状态", "请选中文章");
            return;
        }

        await OnRowEditIsHiddenClick(items.Select(s => s.Id).ToArray(), false, false);

        await ToastService.Success("显示文章成功", "显示文章成功");
        await TableRows.QueryAsync();
    }

    public Task OnRowLookClick(long id, string name)
    {
        NavigationManager.NavigateTo("/articles/index/" + id, name, "fa fa-newspaper-o");
        return Task.CompletedTask;
    }


    private async Task OnRowEditCanCommentClick(long[] ids, bool canComment, bool showMessage)
    {
        string tempString = canComment == true ? "启用文章评论" : "关闭文章评论";
        //调用API
        try
        {
            var result = await Http.PostAsJsonAsync<EditArticleCanCommentModel>(ToolHelper.WebApiPath + "api/comments/EditArticleCanComment", new EditArticleCanCommentModel { Ids = ids, CanComment = canComment });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            var obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);



            if (obj.Successful == false)
            {
                await ToastService.Error(tempString + "失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success(tempString + "成功", tempString + "成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch
        {
            await ToastService.Error(tempString + "失败", "未知异常，请在确保网络正常后联系开发人员");
        }
    }

    private async Task OnCanCommentClick(IEnumerable<ListArticleAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改文章评论状态", "请选中文章");
            return;
        }

        await OnRowEditCanCommentClick(items.Select(s => s.Id).ToArray(), true, false);

        await ToastService.Success("开启文章评论成功", "开启文章评论成功");
        await TableRows.QueryAsync();
    }
    private async Task OnCanNotCommentClick(IEnumerable<ListArticleAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改文章评论状态", "请选中文章");
            return;
        }

        await OnRowEditCanCommentClick(items.Select(s => s.Id).ToArray(), false, false);

        await ToastService.Success("关闭文章评论成功", "关闭文章评论成功");
        await TableRows.QueryAsync();
    }


    [Inject]
    [NotNull]
    private DialogService? DialogService { get; set; }

    public async Task OnEditModel(IEnumerable<ListArticleAloneModel> items)
    {
        int count = items.Count();
        if (count == 0)
        {
            await ToastService.Information("没有修改文章评论状态", "请选中文章");
            return;
        }
        else if (count > 1)
        {
            await ToastService.Information("没有修改文章评论状态", "请选中一个文章");
            return;
        }
        var model = EditorItem<ListArticleAloneModel>.GenerateEditorItems();
        // var item = items.First(i => i.GetFieldName() == nameof(Foo.Hobby));
        //item.Data = Foo.GenerateHobbys(Localizer);

        var option = new EditDialogOption<ListArticleAloneModel>()
        {
            Title = "编辑文章",
            Model = items.First(),
            Items = model,
            OnCloseAsync = () =>
            {
            //Trace.Log("关闭按钮被点击");
            return Task.CompletedTask;
            },
            OnSaveAsync = async context =>
            {
            // Trace.Log("保存按钮被点击");
            var editModel = (ListArticleAloneModel)context.Model;
                await EditData(editModel);
                return true;
            }
        };

        await DialogService.ShowEditDialog(option);
    }

    public async Task EditData(ListArticleAloneModel model)
    {
        try
        {
            var result = await Http.PostAsJsonAsync<ListArticleAloneModel>(ToolHelper.WebApiPath + "api/batch/UpdateArticleData", model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            var obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);

            if (obj.Successful == false)
            {
                await ToastService.Error("保存数据失败", obj.Error);
            }
            else
            {

                await ToastService.Success("保存数据成功", "保存数据成功，不会留下审核记录和编辑记录");
                await TableRows.QueryAsync();
            }
        }
        catch
        {
            await ToastService.Error("保存数据失败", "未知异常，请在确保网络正常后联系开发人员");
        }
    }
}


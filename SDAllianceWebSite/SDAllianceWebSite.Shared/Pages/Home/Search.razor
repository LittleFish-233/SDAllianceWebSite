@page "/home/search/{ScreeningConditions}/{SearchString}/{FilterText}"
@page "/home/search/{ScreeningConditions}/{SearchString}"
@page "/home/search/{ScreeningConditions}"
@page "/home/search"

@inject HttpClient Http
@inject IRoleService _roleService
@inject ToastService? ToastService
@inject NavigationManager NavigationManager

<Title Text="SDAlliance_软萌"></Title>


<div class="">
    <div class="container" style="padding-right: 0; padding-left: 0">
        <div class="row">
            <div class="col-12 col-md-4 col-lg-3 mb-4">
                <div class=" rounded shadow  bg-opacity rounded ps-4 pe-4 pt-3 pb-3">
                    <h4 class="fw-bold mb-3">词条</h4>
                    <h5>
                        <button type="button" class="badge-btn btn btn-success" @onclick="@(()=>OnCondited("游戏"))">游戏</button>
                        <button type="button" class="badge-btn btn btn-success" @onclick="@(()=>OnCondited("角色"))">角色</button>
                        <button type="button" class="badge-btn btn btn-success" @onclick="@(()=>OnCondited("STAFF"))">STAFF</button>
                        <button type="button" class="badge-btn btn btn-success" @onclick="@(()=>OnCondited("制作组"))">制作组</button>
                    </h5>
                    <hr />
                    <h4 class="fw-bold mt-4 mb-3">文章</h4>
                    <h5>
                        <button type="button" class="badge-btn btn btn-primary" @onclick="@(()=>OnCondited("感想"))">感想</button>
                        <button type="button" class="badge-btn btn btn-primary" @onclick="@(()=>OnCondited("访谈"))">访谈</button>
                        <button type="button" class="badge-btn btn btn-primary" @onclick="@(()=>OnCondited("攻略"))">攻略</button>
                        <button type="button" class="badge-btn btn btn-primary" @onclick="@(()=>OnCondited("动态"))">动态</button>
                        <button type="button" class="badge-btn btn btn-primary" @onclick="@(()=>OnCondited("评测"))">评测</button>
                        <button type="button" class="badge-btn btn btn-primary" @onclick="@(()=>OnCondited("周边"))">周边</button>
                        <button type="button" class="badge-btn btn btn-primary" @onclick="@(()=>OnCondited("公告"))">公告</button>
                        <button type="button" class="badge-btn btn btn-primary" @onclick="@(()=>OnCondited("杂谈"))">杂谈</button>
                    </h5>
                    <hr />
                    <h4 class="fw-bold mt-4 mb-3">排序</h4>
                    <h5>
                        <button type="button" class="badge-btn btn btn-info" @onclick="@(()=>Sorting(Model.pagedResultDto.Sorting=="Name desc"?"Name": "Name desc"))">名称</button>
                        <button type="button" class="badge-btn btn btn-info" @onclick="@(()=>Sorting(Model.pagedResultDto.Sorting=="ReaderCount desc"?"ReaderCount": "ReaderCount desc"))">热度</button>
                        <button type="button" class="badge-btn btn btn-info" @onclick="@(()=>Sorting(Model.pagedResultDto.Sorting=="LastEditTime desc"?"LastEditTime": "LastEditTime desc"))">最后编辑</button>

                        <button type="button" class="badge-btn btn btn-info" style="margin-right: 6px;" @onclick="@(()=>Sorting(Model.pagedResultDto.Sorting=="Id desc"?"Id": "Id desc"))">创建时间</button>

                        @if (Model.pagedResultDto.ScreeningConditions == "游戏")
                        {
                            <button type="button" class="badge-btn btn btn-info" @onclick="@(()=>Sorting(Model.pagedResultDto.Sorting=="PubulishTime desc"?"PubulishTime": "PubulishTime desc"))">发行时间</button>
                        }
                    </h5>
                </div>
            </div>
            <div class="col-12 col-md-8 col-lg-9 mb-4">
                <div class=" rounded shadow  bg-opacity rounded ps-2 pe-4 pt-3 pb-3 mb-4">
                    <ul class="nav nav-pills">
                        <li class="nav-item">
                            <a class="nav-link link-primary" @onclick="@(()=>OnCondited("全部"))">全部</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link link-primary" @onclick="@(()=>OnCondited("词条"))">词条</a>
                        </li>

                        <li class="nav-item">
                            <a class="nav-link link-primary" @onclick="@(()=>OnCondited("文章"))">文章</a>
                        </li>
                        <li class="form-inline ms-3">
                            <BootstrapBlazor.Components.Search Items="Items" IsLikeMatch="true" PlaceHolder="可以搜索哦~" @bind-Value="FilterText" OnSearch="@OnSearch"></BootstrapBlazor.Components.Search>
                        </li>
                    </ul>
                </div>

                @if (isReady == false)
                {
                    <div class=" rounded shadow  bg-opacity rounded ps-4 pe-4 pt-3 pb-3 mb-3">
                        <SkeletonParagraph />

                    </div>
                    <div class=" rounded shadow  bg-opacity rounded ps-4 pe-4 pt-3 pb-3 mb-3">
                        <SkeletonParagraph />

                    </div>
                    <div class=" rounded shadow  bg-opacity rounded ps-4 pe-4 pt-3 pb-3 mb-3">
                        <SkeletonParagraph />

                    </div>
                    <div class=" rounded shadow  bg-opacity rounded ps-4 pe-4 pt-3 pb-3 mb-3">
                        <SkeletonParagraph />

                    </div>
                }
                else
                {

                    @for (int i = 0; i < Model.pagedResultDto.Data.Count; i++)
                    {
                        if (Model.pagedResultDto.Data[i].article != null)
                        {
                            <ArticleInforViewTip Model="Model.pagedResultDto.Data[i].article" OnClickUrl="OnClickUrl"></ArticleInforViewTip>
                        }
                        else if (Model.pagedResultDto.Data[i].user != null)
                        {
                            string temp = Model.pagedResultDto.Data[i].user.Id;
                            string tempName = Model.pagedResultDto.Data[i].user.UserName;
                            <div class=" rounded div-shadow  bg-opacity rounded ps-4 pe-4 pt-3 pb-3 mb-3" @onclick="@(()=>ViewAtUser(temp,tempName))">
                                <div class="row">
                                    <div class="col-3 col-md-3 col-lg-2 p-0">
                                        <img class="img-fluid" src="@Model.pagedResultDto.Data[i].user.PhotoPath" style="border-radius: 50%;" />
                                    </div>

                                    <div class="col-9 col-md-9 col-lg-10">
                                        <div class="h5 fw-bold"
                                             title="@Model.pagedResultDto.Data[i].user.UserName">
                                            @Model.pagedResultDto.Data[i].user.UserName
                                        </div>
                                        <p title="@Model.pagedResultDto.Data[i].user.PersonalSignature">
                                            @Model.pagedResultDto.Data[i].user.PersonalSignature
                                        </p>
                                    </div>
                                </div>
                            </div>
                        }
                    }

                    @if (Model.pagedResultDto.Data.Count == 0)
                    {
                        <NotFoundSearch IsNeedLayput="true"></NotFoundSearch>
                    }
                    else
                    {
                        <div class=" rounded shadow  bg-opacity rounded ps-4 pe-4 pt-3 pb-3 mb-4">

                            <Pagination PageItems="@(Model.pagedResultDto.MaxResultCount )" PageItemsSource="@PageItems" TotalCount="@Model.pagedResultDto.TotalCount" OnPageClick="@OnPageClick" OnPageItemsChanged="@OnPageItemsChanged" PageIndex="@Model.pagedResultDto.CurrentPage"></Pagination>

                        </div>

                    }

                }
            </div>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public string ScreeningConditions { get; set; } = "全部";
    public int currentPage { get; set; } = 1;
    [Parameter]
    public string SearchString { get; set; } = "";
    [Parameter]
    public string FilterText { get; set; } = "";
    bool isReady = false;
    bool isFirst = false;
    int tempNum = 0;

    public SearchViewModel Model { get; set; } = new SearchViewModel
    {
        pagedResultDto = new PagedResultDto<SearchAloneModel> { Data = new List<SearchAloneModel>(), CurrentPage = 1, TotalCount = 0, ScreeningConditions = "全部", Sorting = "Id desc" }
    };

    private IEnumerable<int> PageItems => new int[] { 4, 8, 16, 30 };

    private IEnumerable<string> Items { get; set; } = new string[1] { "" };

    protected override async Task OnInitializedAsync()
    {
        tempNum = 0;
        try
        {
            Items = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/home/GetSearchTipList");
            Model.pagedResultDto.ScreeningConditions = ScreeningConditions;
            Model.pagedResultDto.Sorting = SearchString;
            Model.pagedResultDto.FilterText = FilterText;
            isFirst = true;
            await OnPageClick(1, 8);

        }
        catch
        {
            await ToastService.Error("无法获取搜索结果", "未知异常，请在确保网络正常后联系开发人员");
        }

    }

    private async Task OnPageClick(int pageIndex, int pageItems)
    {
        if (isReady == false && isFirst == false)
        {
            return;
        }
        try
        {
            Model.pagedResultDto.CurrentPage = pageIndex;
            Model.pagedResultDto.MaxResultCount = pageItems;
            var result = await Http.PostAsJsonAsync<GetSearchInput>(ToolHelper.WebApiPath + "api/home/search", new GetSearchInput { CurrentPage = pageIndex, MaxResultCount = pageItems, Sorting = Model.pagedResultDto.Sorting ?? "Id desc", FilterText = Model.pagedResultDto.FilterText, ScreeningConditions = Model.pagedResultDto.ScreeningConditions });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Model = JsonSerializer.Deserialize<SearchViewModel>(jsonContent, ToolHelper.options);
            if (Model.pagedResultDto.Data == null)
            {
                Model.pagedResultDto.Data = new List<SearchAloneModel>();
            }
            isReady = true;
            StateHasChanged();
        }
        catch
        {
            await ToastService.Error("无法获取搜索结果", "未知错误，请在确保网络正常后联系开发人员");
        }
    }
    private async Task OnPageItemsChanged(int pageItems)
    {
        if (isReady == false)
        {
            return;
        }

        try
        {
            Model.pagedResultDto.CurrentPage = 1;
            Model.pagedResultDto.MaxResultCount = pageItems;
            var result = await Http.PostAsJsonAsync<GetSearchInput>(ToolHelper.WebApiPath + "api/home/search", new GetSearchInput { CurrentPage = 1, MaxResultCount = pageItems, Sorting = Model.pagedResultDto.Sorting ?? "Id desc", FilterText = Model.pagedResultDto.FilterText, ScreeningConditions = Model.pagedResultDto.ScreeningConditions });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Model = JsonSerializer.Deserialize<SearchViewModel>(jsonContent, ToolHelper.options);
            if (Model.pagedResultDto.Data == null)
            {
                Model.pagedResultDto.Data = new List<SearchAloneModel>();
            }
            StateHasChanged();
        }
        catch
        {
            await ToastService.Error("无法获取搜索结果", "未知错误，请在确保网络正常后联系开发人员");
        }
    }



    private async void Sorting(string sort)
    {
        try
        {
            Model.pagedResultDto.Sorting = sort;
            var result = await Http.PostAsJsonAsync<GetSearchInput>(ToolHelper.WebApiPath + "api/home/search", new GetSearchInput { CurrentPage = Model.pagedResultDto.CurrentPage, MaxResultCount = Model.pagedResultDto.MaxResultCount, Sorting = sort, FilterText = Model.pagedResultDto.FilterText, ScreeningConditions = Model.pagedResultDto.ScreeningConditions });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Model = JsonSerializer.Deserialize<SearchViewModel>(jsonContent, ToolHelper.options);
            if (Model.pagedResultDto.Data == null)
            {
                Model.pagedResultDto.Data = new List<SearchAloneModel>();
            }
            StateHasChanged();
        }
        catch
        {
            await ToastService.Error("无法获取搜索结果", "未知错误，请在确保网络正常后联系开发人员");
        }
    }

    private async Task OnSearch(string text)
    {
        try
        {
            Model.pagedResultDto.FilterText = text;
            Model.pagedResultDto.CurrentPage = 1;
            var result = await Http.PostAsJsonAsync<GetSearchInput>(ToolHelper.WebApiPath + "api/home/search", new GetSearchInput { CurrentPage = Model.pagedResultDto.CurrentPage, MaxResultCount = Model.pagedResultDto.MaxResultCount, Sorting = Model.pagedResultDto.Sorting ?? "Id desc", FilterText = Model.pagedResultDto.FilterText, ScreeningConditions = Model.pagedResultDto.ScreeningConditions });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Model = JsonSerializer.Deserialize<SearchViewModel>(jsonContent, ToolHelper.options);
            if (Model.pagedResultDto.Data == null)
            {
                Model.pagedResultDto.Data = new List<SearchAloneModel>();
            }

            StateHasChanged();
        }
        catch
        {
            await ToastService.Error("无法获取搜索结果", "未知错误，请在确保网络正常后联系开发人员");
        }
    }
    private async void OnCondited(string str)
    {
        try
        {
            Model.pagedResultDto.ScreeningConditions = str;
            Model.pagedResultDto.CurrentPage = 1;
            var result = await Http.PostAsJsonAsync<GetSearchInput>(ToolHelper.WebApiPath + "api/home/search", new GetSearchInput { CurrentPage = Model.pagedResultDto.CurrentPage, MaxResultCount = Model.pagedResultDto.MaxResultCount, Sorting = Model.pagedResultDto.Sorting ?? "Id desc", FilterText = Model.pagedResultDto.FilterText, ScreeningConditions = Model.pagedResultDto.ScreeningConditions });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Model = JsonSerializer.Deserialize<SearchViewModel>(jsonContent, ToolHelper.options);
            if (Model.pagedResultDto.Data == null)
            {
                Model.pagedResultDto.Data = new List<SearchAloneModel>();
            }

            StateHasChanged();
        }
        catch
        {
            await ToastService.Error("无法获取搜索结果", "未知错误，请在确保网络正常后联系开发人员");
        }
    }

    public Task ViewAtEntry(int id, string name)
    {
        NavigationManager.NavigateTo("/entries/index/" + id, name, "fa fa-codepen");
        return Task.CompletedTask;
    }
    public Task ViewAtArticle(long id, string name)
    {
        NavigationManager.NavigateTo("/articles/index/" + id, name, "fa fa-newspaper-o");
        return Task.CompletedTask;
    }
    public Task ViewAtUser(string id, string name)
    {
        NavigationManager.NavigateTo("/space/index/" + id, name, "fa fa-star-o");
        return Task.CompletedTask;
    }
    public async void OnClickUrl(NavigateModel model)
    {
        try
        {
            NavigationManager.NavigateTo(model.Url, model.Title, model.Icon);
        }
        catch
        {
            await ToastService.Error("导航失败", "请尝试刷新页面");
        }
    }
}

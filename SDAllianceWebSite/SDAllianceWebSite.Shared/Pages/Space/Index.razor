@page "/space/index/{Id}/{CurrentIndex}"
@page "/space/index/{Id}"

@inject HttpClient Http
@inject ExamineService _examineService
@inject ToastService? ToastService
@inject ILocalStorageService _localStorage
@inject NavigationManager NavigationManager
@inject IJSRuntime JS


<Title Text="SDAlliance_软萌"></Title>


@if (string.IsNullOrWhiteSpace(Model.SBgImage) == false)
{
    <div id="web_bg" style="background-image: url(@Model.SBgImage)" class="d-none bg-d-lg-block bgimage-ison"></div>
}
@if (string.IsNullOrWhiteSpace(Model.MBgImage) == false)
{
    <div id="web_bg" style="background-image: url(@Model.MBgImage)" class=" d-none d-sm-block bgimage-ison"></div>
}

<div class="row">
    <div class="col-12 @(IsLargeScreen?" col-xl-9":"")">
        @if (isNotFound == true)
        {
            <NotFoundUser IsNeedLayput="true"></NotFoundUser>
        }
        else
        {
            @if (IsLargeScreen == false)
            {
                <UserInforTip Length="ScreenLength" UserId="@Id" @ref="userInforTip" OnClickUrl="OnClickUrl"></UserInforTip>
            }

            <div class="row" style="padding-right: 0;padding-left: 0;">
                @if (IsSmallScreen && isReady)
                {
                    <div class="col-12 mb-3">
                        <SpaceTabViewTip OnTabClick="OnTabClick" IsSmallSreeen="true" IsCurrentUser="Model.IsCurrentUser" RandomIndex="randomIndex" IsShowFavorites="Model.IsShowFavorites"></SpaceTabViewTip>
                    </div>
                }
                <div class="@(IsSmallScreen?"col-12":"") @(IsNormalScreen?"col-9":"") @(IsLargeScreen?"col-12":"") mb-2">


                    @if (isReady == false)
                    {
                        <div class="rounded shadow  bg-opacity rounded ps-4 pe-4 pt-4 pb-4">
                            <div>
                                <SkeletonParagraph />
                                <div class="mt-2">
                                </div>
                                <SkeletonParagraph />
                                <div class="mt-2">
                                </div>
                                <SkeletonParagraph />
                                <div class="mt-2">
                                </div>
                                <SkeletonParagraph />
                                <div class="mt-2">
                                </div>
                                <SkeletonParagraph />
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="tab-content" id="@("pills"+randomIndex+"-tabContent")">
                            <div class="tab-pane fade show active" id="@("pills"+randomIndex+"-1")" role="tabpanel" aria-labelledby="@("pills"+randomIndex+"-1-tab")">
                                <div class="rounded  rounded shadow  p-4 bg-opacity">
                                    <div>
                                        @if (Model.IsCurrentUser == true)
                                        {
                                            <Button ButtonType="ButtonType.Button" IsOutline="true" Size="Size.Small" Color="Color.Primary" Icon="fa fa-pencil " class="mb-4"
                                                    @onclick="EditMainPage">
                                                &nbsp;&nbsp;编辑&nbsp;&nbsp;
                                            </Button>
                                        }
                                        <div class="tui-editor-contents">
                                            @((MarkupString)Model.MainPageContext)
                                        </div>


                                    </div>
                                </div>
                            </div>
                            <div class="tab-pane fade" id="@("pills"+randomIndex+"-0")" role="tabpanel" aria-labelledby="@("pills"+randomIndex+"-0-tab")">
                                <div class="rounded  rounded shadow  p-4 bg-opacity">
                                    <CalendarHeatmapTip BeforeTreatmentDate="Model.SignInDaysList" ShowTip="false"></CalendarHeatmapTip>
                                    <div class="mt-4 mb-1" style="display: flex; justify-content: center;">
                                        @if (Model.IsCurrentUser == true)
                                        {
                                            if (Model.IsSignIn == false)
                                            {
                                                <Button ButtonType="ButtonType.Button" Color="Color.Success" Icon="fa fa-calendar-plus-o"
                                                        IsOutline="true" @onclick="SignIn" IsAsync="true">

                                                    &nbsp; &nbsp;今天还没有签到哦~点我签到    &nbsp; &nbsp;
                                                </Button>
                                            }
                                            else
                                            {
                                                <Button ButtonType="ButtonType.Button" Color="Color.Success" Icon="fa fa-calendar-check-o"
                                                        IsOutline="false" IsDisabled="true">
                                                    @(" 连续签到"+Model.SignInDays+"天~ ")
                                                </Button>
                                            }

                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="tab-pane fade" id="@("pills"+randomIndex+"-2")" role="tabpanel" aria-labelledby="@("pills"+randomIndex+"-2-tab")">
                                <div class="rounded  rounded shadow  p-4 bg-opacity">
                                    <div>
                                        <p class="text-center" style="font-size: large; font-weight: bold;">编辑概览</p>
                                        <CalendarHeatmapTip BeforeTreatmentDate="Model.EditCountList"></CalendarHeatmapTip>

                                        <div class="row mt-2" style="padding-right: 0;padding-left: 0;">
                                            <div class="col-12 col-md-12 col-lg-12 col-xl-6 mt-1 mb-2">
                                                <Chart ChartType="ChartType.Pie" OnInitAsync="@OnPieInit" @ref="PieChart" />
                                            </div>
                                            <div class="col-12 col-md-12 col-lg-12 col-xl-6 mt-1 mb-2">
                                                <Chart ChartType="ChartType.Pie" OnInitAsync="@OnPieInitFile" @ref="PieChartFile" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="tab-pane fade" id="@("pills"+randomIndex+"-3")" role="tabpanel" aria-labelledby="@("pills"+randomIndex+"-3-tab")">
                                <div class="rounded  rounded shadow  p-4 bg-opacity">
                                    <div>

                                        <h5 class="fw-bold mb-3">基本信息</h5>
                                        <h6>@Model.Name（UID：@Model.Id）</h6>
                                        <!-- <h6>邮箱：@Model.Email</h6>-->
                                        <h6>生日：@(Model.Birthday?.ToString("M")??"未知")</h6>
                                        @if (Model.IsCurrentUser == true)
                                        {
                                            <Button ButtonType="ButtonType.Button" IsOutline="true" Size="Size.Small" Color="Color.Primary" Icon="fa fa-pencil " @onclick="EditData"
                                                    class="mt-2 mb-1">
                                                &nbsp;&nbsp; 编辑&nbsp;&nbsp;
                                            </Button>
                                        }
                                        <hr />
                                        <h5 class="fw-bold mb-3">用户认证</h5>
                                        @if (Model.Role == "Admin")
                                        {
                                            <h6 class="text-danger">管理员</h6>
                                        }
                                        else
                                        {
                                            <h6 class="text-success">普通用户</h6>
                                        }
                                        <hr />
                                        <h5 class="fw-bold mb-3">公开信息</h5>
                                        <div class="row mt-2" style="padding-right: 0; padding-left: 0">
                                            @if (string.IsNullOrWhiteSpace(Model.Institute) == false)
                                            {
                                                <div class="col-12 col-md-12 col-lg-6">
                                                    <h6>学院：@Model.Institute</h6>
                                                </div>
                                            }
                                            @if (string.IsNullOrWhiteSpace(Model.StudentClass) == false)
                                            {
                                                <div class="col-12 col-md-12 col-lg-6">
                                                    <h6>班级：@Model.StudentClass</h6>
                                                </div>
                                            }
                                            @if (string.IsNullOrWhiteSpace(Model.StudentId) == false)
                                            {
                                                <div class="col-12 col-md-12 col-lg-6">
                                                    <h6>学号：@Model.StudentId</h6>
                                                </div>
                                            }
                                            @if (string.IsNullOrWhiteSpace(Model.QQ) == false)
                                            {
                                                <div class="col-12 col-md-12 col-lg-6">
                                                    <h6>QQ：@Model.QQ</h6>
                                                </div>
                                            }
                                            @if (string.IsNullOrWhiteSpace(Model.WeChat) == false)
                                            {
                                                <div class="col-12 col-md-12 col-lg-6">
                                                    <h6>微信：@Model.WeChat</h6>
                                                </div>
                                            }
                                            @if (string.IsNullOrWhiteSpace(Model.PublicEmail) == false)
                                            {
                                                <div class="col-12 col-md-12 col-lg-6">
                                                    <h6>邮箱：@Model.PublicEmail</h6>
                                                </div>
                                            }
                                        </div>
                                        <hr />
                                        <h5 class="fw-bold mb-3">统计信息</h5>
                                        <div class="row mt-2" style="padding-right: 0; padding-left: 0">
                                            <div class="col-12 col-md-12 col-lg-6">
                                                <h6>积分：@Model.Integral</h6>

                                            </div>
                                            <div class="col-12 col-md-12 col-lg-6">
                                                <h6>学习值：@Model.LearningValue</h6>

                                            </div>

                                            <div class="col-12 col-md-12 col-lg-6">
                                                <h6>发表文章：@Model.CreateArticleNum</h6>

                                            </div>
                                        </div>

                                        <hr />
                                        <h5 class="fw-bold mb-3">活跃概况</h5>
                                        <div class="row mt-2" style="padding-right: 0; padding-left: 0">
                                            <div class="col-12 col-md-12 col-lg-6">
                                                <h6>等级：Lv.@(Model.Integral/900)</h6>

                                            </div>
                                            <div class="col-12 col-md-12 col-lg-6">
                                                <h6>在线时间：@Model.OnlineTime.ToString("0.0") 小时</h6>

                                            </div>
                                            <div class="col-12 col-md-12 col-lg-6">
                                                <h6>注册时间：@Model.RegisteTime.ToString("yyyy/MM/dd HH:mm")</h6>
                                            </div>
                                            <div class="col-12 col-md-12 col-lg-6">
                                                <h6>最后访问：@Model.LastOnlineTime.ToString("yyyy/MM/dd HH:mm")</h6>
                                            </div>
                                            <div class="col-12 col-md-12 col-lg-6">
                                                <h6>上次编辑时间：@(Model.LastEditTime?.ToString("yyyy/MM/dd HH:mm") ?? "无")</h6>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="tab-pane fade" id="@("pills"+randomIndex+"-4")" role="tabpanel" aria-labelledby="@("pills"+randomIndex+"-4-tab")">
                                <div class="rounded  rounded shadow  p-4 bg-opacity">
                                    <div style="overflow-x: auto; overflow-y: auto;">
                                        <table class="table">
                                            <thead>
                                                <tr>
                                                    <th>
                                                        状态
                                                    </th>
                                                    <th>
                                                        关联词条/文章

                                                    </th>
                                                    <th>
                                                        编辑部分
                                                    </th>
                                                    <th>
                                                        编辑时间
                                                    </th>
                                                    <th>
                                                        审核时间
                                                    </th>

                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var examine in pagedResultDto.Data)
                                                {

                                                    <tr>
                                                        <td>
                                                            @if (examine.IsPassed != null)
                                                            {
                                                                if (examine.IsPassed == true)
                                                                {
                                                                    <p class="text-success">已通过</p>
                                                                }
                                                                else
                                                                {
                                                                    <p class="text-danger">未通过</p>
                                                                }
                                                            }
                                                            else
                                                            {
                                                                <p class="text-primary">待审核</p>
                                                            }
                                                        </td>
                                                        <td>
                                                            @{
                                                                string name = "";
                                                            }
                                                            @if (examine.Type == ExaminedNormalListModelType.Article)
                                                            {
                                                                name = examine.RelatedName + " 编辑记录";
                                                                <TabLink Text="@examine.RelatedName" Url="@("/articles/index/"+@examine.RelatedId)" Icon="fa fa-newspaper-o">
                                                                    @(string.IsNullOrWhiteSpace(examine.RelatedName) ?("Id："+ examine.RelatedId) : examine.RelatedName)
                                                                </TabLink>
                                                            }
                                                           
                                                            else if (examine.Type == ExaminedNormalListModelType.Comment)
                                                            {
                                                                name = "评论 审核记录";
                                                            }
                                                            else
                                                            {
                                                                name = "用户主页 编辑记录";
                                                                @("其他")
                                                            }
                                                        </td>
                                                        <td>
                                                            <TabLink Text="@name" Url="@("/home/examined/"+examine.Id)" Icon="fa fa-pencil">
                                                                @examine.Operation.GetDisplayName()
                                                            </TabLink>
                                                        </td>
                                                        <td>
                                                            @examine.ApplyTime
                                                        </td>
                                                        <td>
                                                            @if (examine.PassedTime != null)
                                                            {
                                                                @examine.PassedTime
                                                            }
                                                            else
                                                            {
                                                                @("无")
                                                            }


                                                        </td>

                                                    </tr>


                                                }
                                            </tbody>
                                        </table>
                                        <Pagination PageItems="@(pagedResultDto.MaxResultCount )" PageItemsSource="@PageItems" TotalCount="@Model.TotalExamine" OnPageClick="@OnPageClick" OnPageItemsChanged="@OnPageItemsChanged"></Pagination>
                                    </div>
                                </div>
                            </div>
                            <div class="tab-pane fade" id="@("pills"+randomIndex+"-5")" role="tabpanel" aria-labelledby="@("pills"+randomIndex+"-5-tab")">
                                <MessageListView Messages="ListMessages" OnPageChanged="OnMessagePageClick" IsSmallScreen="IsSmallScreen" OnRefreshMessage="@(()=>OnMessagePageClick(1))"
                                                 OnClickUrl="OnClickUrl" />
                            </div>
                            <div class="tab-pane fade" id="@("pills"+randomIndex+"-6")" role="tabpanel" aria-labelledby="@("pills"+randomIndex+"-6-tab")">
                                @if (Model.CanComment)
                                {
                                    @if (Model.IsCurrentUser)
                                    {
                                        <AlertTip Title="管理空间留言" Type="AlertTip.AlertTipType.SpaceComment" Url="@("/space/editspacecomments/" + Model.Id)"></AlertTip>
                                    }
                                    <CommentListView OnPageChanged="OnCommentPageClick" Comments="ListComments" IsShowNotFound="true" IsSmallScreen="IsSmallScreen" RelyCallBack="OnRely" IsAdmin="IsAdmin" CanDeleted="CanDeleted" DeletedCallBack="OnDeleted"></CommentListView>
                                    <ReplyCommentTip IsChild="false" ObjectId="@Model.Id" Type="CommentType.CommentUser" RelyCallBack="OnRely" IsAdmin="IsAdmin"></ReplyCommentTip>
                                }
                                else
                                {
                                    <CloseCommentTip IsNeedLayput="true"></CloseCommentTip>
                                }
                            </div>
                            <div class="tab-pane fade" id="@("pills"+randomIndex+"-7")" role="tabpanel" aria-labelledby="@("pills"+randomIndex+"-7-tab")">
                                <ArticleHomeListView Input="PublishArticleInput" OnClickUrl="OnClickUrl"></ArticleHomeListView>
                            </div>
                            <div class="tab-pane fade" id="@("pills"+randomIndex+"-10")" role="tabpanel" aria-labelledby="@("pills"+randomIndex+"-10-tab")">
                                @if (Model.IsCurrentUser || Model.IsShowFavorites)
                                {
                                    <FavoriteFoldersViewTip UserId="@Model.Id" OnClickUrl="OnClickUrl" @ref="FavoritesTip" IsCurrentUser="Model.IsCurrentUser"></FavoriteFoldersViewTip>
                                }
                            </div>
                        </div>
                    }

                </div>
                @if (IsNormalScreen && isReady)
                {
                    <div class="col-3">
                        <SpaceTabViewTip OnTabClick="OnTabClick" IsCurrentUser="Model.IsCurrentUser" RandomIndex="randomIndex"></SpaceTabViewTip>
                    </div>
                }
            </div>
        }

    </div>

    @if (IsLargeScreen)
    {
        <div class="col-xl-3">

            <UserInforTip Length="75" UserId="@Id" @ref="userInforTip" OnClickUrl="OnClickUrl"></UserInforTip>
            @if (isReady)
            {
                <SpaceTabViewTip OnTabClick="OnTabClick" IsCurrentUser="Model.IsCurrentUser" RandomIndex="randomIndex" IsShowFavorites="Model.IsShowFavorites"></SpaceTabViewTip>
            }
        </div>
    }
</div>



@code {

    private string id = "";
    [Parameter]
    public string Id
    {
        get
        {
            return id;
        }
        set
        {
            id = value;
            TabIndex = 1;
            randomIndex = Randomer.Next();
            if (isFirstLoad == true)
            {

            }
            else
            {
                OnInitializedAsync();
            }


        }
    }


    [Parameter]
    public string CurrentIndex { get; set; }

    public int TabIndex { get; set; } = 1;

    public string steam { get; set; }
    public string CurrentUserRank { get; set; }
    public int currentPage { get; set; } = 1;
    public string NoticeCard { get; set; } = "";
    bool isReady = false;
    bool isFirstLoad = true;
    bool isNotFound = false;
    public int randomIndex = 0;

    [NotNull]
    private Chart? PieChart { get; set; }
    [NotNull]
    private Chart? PieChartFile { get; set; }
    [NotNull]
    private FavoriteFoldersViewTip? FavoritesTip { get; set; }

    private IEnumerable<int> PageItems => new int[] { 3, 10, 20, 40 };
    private IEnumerable<string> ExamineState { get; set; } = new List<string>() { "未通过", "已通过", "待审核" };

    private static Random Randomer { get; set; } = new Random();
    public PersonalSpaceViewModel Model { get; set; } = new PersonalSpaceViewModel
    {
        EditCountList = new List<KeyValuePair<DateTime, int>>()
    };
    public PagedResultDto<ExaminedNormalListModel> pagedResultDto = new SDAllianceWebSite.Shared.Application.Dtos.PagedResultDto<ExaminedNormalListModel> { Data = new List<ExaminedNormalListModel>(), CurrentPage = 1, TotalCount = 0 };
    public PagedResultDto<SDAllianceWebSite.Shared.Model.Message> ListMessages = new SDAllianceWebSite.Shared.Application.Dtos.PagedResultDto<SDAllianceWebSite.Shared.Model.Message> { Data = new List<SDAllianceWebSite.Shared.Model.Message>(), CurrentPage = 1, TotalCount = 0 };
    public PagedResultDto<CommentViewModel> ListComments = new SDAllianceWebSite.Shared.Application.Dtos.PagedResultDto<CommentViewModel> { Data = new List<CommentViewModel>(), CurrentPage = 1, TotalCount = 0 };



    public PagedSortedAndFilterInput PublishArticleInput { get; set; } = new PagedSortedAndFilterInput();
    public PagedSortedAndFilterInput PlayedGameInput { get; set; } = new PagedSortedAndFilterInput();

    [NotNull]
    private UserInforTip? userInforTip;

    #region 获取屏幕大小

    /// <summary>
    /// 获得/设置 IJSRuntime 实例
    /// </summary>
    [Inject]
    [System.Diagnostics.CodeAnalysis.NotNull]
    public IJSRuntime? JSRuntime { get; set; }



    public bool IsSmallScreen { get; set; } = true;
    public bool IsNormalScreen { get; set; }
    public bool IsLargeScreen { get; set; }
    public int ScreenLength { get; set; } = 75;
    public bool IsAdmin { get; set; } = false;
    public bool CanDeleted { get; set; }
    string LastLookName = "";

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private JSInterop<Index>? Interop { get; set; }
    /// <summary>
    /// OnAfterRenderAsync 方法
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            Interop = new JSInterop<Index>(JSRuntime);
            await Interop.InvokeVoidAsync(this, null, "bb_layout", nameof(SetCollapsed));

            isFirstLoad = false;


        }
        //判断是否需要切换到消息页面
        /*if(CurrentIndex!="-1")
        {
            if (CurrentIndex == "5")
            {
                string result = await JS.InvokeAsync<string>("ActiveTab", "#pills" + randomIndex + "-5-tab");
                if (result == "成功")
                {
                    CurrentIndex = "-1";
                }
            }
            else
            {
                string result = await JS.InvokeAsync<string>("ActiveTab", "#pills" + randomIndex + "-1-tab");
                if (result == "成功")
                {
                    CurrentIndex = "-1";
                }
            }
        }*/

  
        try
        {
            await JS.InvokeAsync<string>("highlightAllCode");
        }
        catch
        {

        }
    }


    /// <summary>
    /// 设置侧边栏收缩方法 客户端监控 window.onresize 事件回调此方法
    /// </summary>
    /// <returns></returns>
    [JSInvokable]
    public void SetCollapsed(int width)
    {

        IsSmallScreen = width < 1000;
        IsNormalScreen = width >= 1000 && width < 1700;


        IsLargeScreen = width >= 1700;

        ScreenLength = width / 10;
        if (ScreenLength < 75)
        {
            ScreenLength = 75;
        }
        StateHasChanged();
    }
    #endregion

    protected override async Task OnInitializedAsync()
    {

        try
        {
            isReady = false;
            isNotFound = false;

            var userState = await authenticationStateTask;
            var user = userState.User;
            if (string.IsNullOrWhiteSpace(id) && user.Identity.IsAuthenticated == false)
            {
                return;
            }

            //获取用户基本信息
            Model = await Http.GetFromJsonAsync<PersonalSpaceViewModel>(ToolHelper.WebApiPath + "api/space/getuserview/" + Id);

            if (Model.IsCurrentUser)
            {
                CurrentUserRank = "本人";
                CanDeleted = true;
            }
            if (user.IsInRole("Admin"))
            {
                IsAdmin = true;
                CanDeleted = true;
            }
            //Id = Model.Id;

            //复制用户Id
            PublishArticleInput.FilterText = Model.Id;
            PlayedGameInput.FilterText = Model.Id;



            if (user.Identity.Name == Model.Name && user.Identity.IsAuthenticated)
            {
                //获取审核列表
                await OnPageClick(1, 10);
                //获取消息列表
                await OnMessagePageClick(1);
            }
            if (userInforTip != null && Model != null)
            {
                //获取留言
                await OnCommentPageClick(1);
                await userInforTip.Refresh(Model.Id);
            }

            isReady = true;
            StateHasChanged();

        }
        catch (Exception exc)
        {
            isNotFound = true;
            isReady = true;
            StateHasChanged();
        }
    }


    private Task<ChartDataSource> OnPieInit()
    {
        var ds = new ChartDataSource();

        ds.Options.Title = "审核概览";

        ds.Labels = ExamineState;
        List<object> temp = new List<object>();

        temp.Add(Model.UnpassedExamineCount);
        temp.Add(Model.PassedExamineCount);
        temp.Add(Model.PassingExamineCount);

        ds.Data.Add(new ChartDataset()
        {
            Label = "审核状态",
            Data = temp
        });
        return Task.FromResult(ds);
    }

    private Task<ChartDataSource> OnPieInitFile()
    {
        var ds = new ChartDataSource();


        ds.Options.Title = "文件空间概览";

        double tempUsed = ((double)Model.UsedFilesSpace / 1024 / 1024);
        double tempUnUsed = ((double)(Model.TotalFilesSpace - Model.UsedFilesSpace) / 1024 / 1024);
        List<string> FileSpace = new List<string>();
        string tempStr = "已使用 " + tempUsed.ToString("0.0") + "MB";
        FileSpace.Add(tempStr);
        tempStr = "未使用 " + tempUnUsed.ToString(".0") + "MB";
        FileSpace.Add(tempStr);

        ds.Labels = FileSpace;

        List<object> temp = new List<object>();

        temp.Add(tempUsed);
        temp.Add(tempUnUsed);



        ds.Data.Add(new ChartDataset()
        {
            Label = "文件储存状态",
            Data = temp
        });
        return Task.FromResult(ds);
    }
    //private Logger? Trace { get; set; }

    private async Task OnPageClick(int pageIndex, int pageItems)
    {
        try
        {
            //获取用户编辑记录
            pagedResultDto.Data = (await Http.GetFromJsonAsync<IEnumerable<ExaminedNormalListModel>>(ToolHelper.WebApiPath + "api/space/getusereditrecord/" + Model.Id + "/" + pageIndex + "/" + pageItems)).ToList();
            pagedResultDto.CurrentPage = pageIndex;
            pagedResultDto.MaxResultCount = pageItems;
            if (pagedResultDto.Data == null)
            {
                pagedResultDto.Data = new List<ExaminedNormalListModel>();
            }
            StateHasChanged();
        }
        catch
        {
            await ToastService.Error("获取编辑记录失败", "未知错误，请在确保网络正常后联系开发人员");
        }
    }
    private async Task OnPageItemsChanged(int pageItems)
    {
        try
        {
            //获取用户编辑记录
            pagedResultDto.Data = (await Http.GetFromJsonAsync<IEnumerable<ExaminedNormalListModel>>(ToolHelper.WebApiPath + "api/space/getusereditrecord/" + Model.Id + "/1/" + pageItems)).ToList();
            pagedResultDto.MaxResultCount = pageItems;
            if (pagedResultDto.Data == null)
            {
                pagedResultDto.Data = new List<ExaminedNormalListModel>();
            }
            StateHasChanged();
        }
        catch
        {
            await ToastService.Error("获取编辑记录失败", "未知错误，请在确保网络正常后联系开发人员");
        }
    }




    private async void EditMainPage()
    {
        try
        {
            NavigationManager.NavigateTo("/space/editmainpage/" + Model.Id, "编辑主页", "fa fa-pencil");
        }
        catch
        {
            await ToastService.Error("跳转到编辑页面失败", "可未知错误，请在确保网络正常后联系开发人员");
        }
    }

    private async void EditData()
    {
        try
        {
            NavigationManager.NavigateTo("/space/editdata/" + Model.Id, "编辑资料", "fa fa-pencil");
        }
        catch
        {
            await ToastService.Error("跳转到编辑页面失败", "可未知错误，请在确保网络正常后联系开发人员");
        }
    }
    private async Task SignIn()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<Result>(ToolHelper.WebApiPath + "api/space/signIn");
            if (result.Successful == true)
            {
                Model.IsSignIn = true;
                Model.SignInDays++;
                StateHasChanged();
                await ToastService.Success("签到成功", "已获得5积分");
            }
        }
        catch
        {
            await ToastService.Error("签到失败", "未知错误，请在确保网络正常后联系开发人员");
        }
    }

    public async void OnTabClick(int index)
    {
        TabIndex = index;

        if (index == 5)
        {
            //
            await OnReadedAllMessage();
        }
    }

    private async Task OnMessagePageClick(int pageIndex)
    {
        try
        {
            //获取用户编辑记录
            ListMessages = await Http.GetFromJsonAsync<PagedResultDto<SDAllianceWebSite.Shared.Model.Message>>(ToolHelper.WebApiPath + "api/space/GetUserMessage/" + pageIndex + "/10");
            StateHasChanged();
        }
        catch
        {
            await ToastService.Error("获取消息列表失败", "未知错误，请在确保网络正常后联系开发人员");
        }
    }

    public async Task OnReadedAllMessage()
    {
        try
        {
            var obj = await Http.GetFromJsonAsync<Result>(ToolHelper.WebApiPath + "api/space/ReadedAllMessages/");
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("使消息已读失败", obj.Error);
            }
        }
        catch
        {
            await ToastService.Error("使消息已读失败", "发生未知错误，请确保网络正常后联系开发人员");
        }
    }
    private async Task OnCommentPageClick(int pageIndex)
    {
        try
        {
            //获取用户编辑记录
            ListComments = await Http.GetFromJsonAsync<PagedResultDto<CommentViewModel>>(ToolHelper.WebApiPath + "api/comments/GetComments/" + (int)CommentType.CommentUser + "/" + Model.Id + "/" + pageIndex + "/8");
            StateHasChanged();
        }
        catch (Exception exc)
        {
            await ToastService.Error("获取评论列表失败", "『" + exc.Message + "』请在确保网络正常后联系开发人员");
        }
    }
    private async Task OnRely()
    {
        await OnCommentPageClick(ListComments.CurrentPage);
    }
    private async Task OnDeleted()
    {
        await OnCommentPageClick(ListComments.CurrentPage);
    }
    public async void OnClickUrl(NavigateModel model)
    {
        try
        {
            NavigationManager.NavigateTo(model.Url, model.Title, model.Icon);
        }
        catch
        {
            await ToastService.Error("导航失败", "请尝试刷新页面");
        }
    }
}

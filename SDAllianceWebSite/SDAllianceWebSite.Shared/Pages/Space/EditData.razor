@page "/space/editdata/{Id}"
@attribute [Authorize]

@inject HttpClient Http
@inject ExamineService _examineService
@inject SwalService SwalService
@inject ToastService? ToastService
@inject IAppHelper _appHelper
@inject NavigationManager NavigationManager


<Title Text="SDAlliance_软萌"></Title>

<div class="rounded shadow p-4 bg-opacity rounded">
    @if (isReady == false)
    {
        <SkeletonParagraph />
        <div class="mt-2">
        </div>
        <SkeletonParagraph />
        <div class="mt-2">
        </div>
        <SkeletonParagraph />
        <div class="mt-2">
        </div>
        <SkeletonParagraph />
        <hr />
        <h5 class="fw-bold mb-3">账户安全</h5>
        <SkeletonParagraph />
        <div class="mt-2">
        </div>
        <SkeletonParagraph />
        <hr />
        <h5 class="fw-bold mb-3">基本信息</h5>
        <SkeletonParagraph />
        <div class="mt-2">
        </div>
        <SkeletonParagraph />
    }
    else
    {
        <div class="row">
            <div class=" col-12 col-md-6  col-lg-3 mt-2">
                <ImageCropperButton ImagePath="@Model.PhotoPath" OnUploadedImage="OnCardUpload1" Type="ImageAspectType._1_1" Text="上传头像"></ImageCropperButton>
            </div>
            <div class=" col-12 col-md-6  col-lg-3 mt-2">
                <ImageCropperButton ImagePath="@Model.BackgroundPath" OnUploadedImage="OnCardUpload2" Type="ImageAspectType._4_1A2" Text="上传主图"></ImageCropperButton>
            </div>
            <div class=" col-12 col-md-6  col-lg-3 mt-2">
                <ImageCropperButton ImagePath="@Model.MBgImagePath" OnUploadedImage="OnCardUpload3" Type="ImageAspectType.None" Text="上传大背景"></ImageCropperButton>
            </div>
            <div class=" col-12 col-md-6  col-lg-3 mt-2">
                <ImageCropperButton ImagePath="@Model.SBgImagePath" OnUploadedImage="OnCardUpload4" Type="ImageAspectType.None" Text="上传小背景"></ImageCropperButton>
            </div>
        </div>
        <hr />
        <h5 class="fw-bold mb-3">账户安全</h5>
        <p>
            密码：********
            <a href="@("/account/ChangePassword/"+ToolHelper.Base64EncodeUrl(NavigationManager.Uri))" class="ms-3" one-link-mark="yes">修改</a>
        </p>
        <p>
            邮箱：@Model.Email
            <a href="@("/account/ChangeEmail/"+ToolHelper.Base64EncodeUrl(NavigationManager.Uri))" class="ms-3" one-link-mark="yes">修改</a>
        </p>
    
        @if (string.IsNullOrWhiteSpace(Model.GiteeAccountName))
        {
            <p>
                Gitee：无
                <a href="@(ToolHelper.GetThirdPartyLoginUrl(ToolHelper.Base64EncodeUrl( NavigationManager.Uri),ThirdPartyLoginType.Gitee))" class="ms-3" one-link-mark="yes">绑定</a>
            </p>
        }
        else
        {
            <p>
                Gitee：@Model.GiteeAccountName
                <a href="@(ToolHelper.GetThirdPartyLoginUrl(ToolHelper.Base64EncodeUrl( NavigationManager.Uri),ThirdPartyLoginType.Gitee))" class="ms-3" one-link-mark="yes">修改</a>
            </p>
        }
        <hr />
        <h5 class="fw-bold mb-3">公开信息</h5>
        <ValidateForm Model="@Model" ValidateAllProperties="true">

            <div class="row">

                <div class="form-group col-12  col-sm-6">
                    <BootstrapInput @bind-Value="Model.Institute" />
                </div>
                <div class="form-group col-12  col-sm-6">
                    <BootstrapInput @bind-Value="@Model.StudentClass" />
                </div>
                <div class="form-group col-12  col-sm-6">
                    <BootstrapInput @bind-Value="Model.StudentId" />
                </div>
                <div class="form-group col-12  col-sm-6">
                    <BootstrapInput @bind-Value="Model.QQ" />
                </div>
                <div class="form-group col-12  col-sm-6">
                    <BootstrapInput @bind-Value="@Model.WeChat" />
                </div>
                <div class="form-group col-12  col-sm-6">
                    <BootstrapInput @bind-Value="Model.PublicEmail" />
                </div>
            </div>
        </ValidateForm>

        <hr />
        <h5 class="fw-bold mb-3">基本信息</h5>
        <ValidateForm Model="@Model" ValidateAllProperties="true">

            <div class="row">

                <div class="form-group col-12  col-sm-6">
                    <BootstrapInput @bind-Value="Model.UserName" />
                </div>
                <div class="form-group col-12  col-sm-6">
                    <DateTimePicker @bind-Value="@Model.Birthday" />
                </div>
                <div class="form-group col-12  col-sm-6">
                    <BootstrapInput @bind-Value="@Model.StudentName" />
                </div>
                <div class="form-group col-12 col-sm-6">
                    <Switch @bind-Value="Model.CanComment" />
                </div>

                <div class="form-group col-12">
                    <BootstrapInput @bind-Value="Model.PersonalSignature" />
                </div>

            </div>
        </ValidateForm>

        <Button IsOutline="true" Color="Color.Success" class="mt-4" style="width: 100px" IsAsync="true" Icon="fa fa-check" Text="完成" @onclick="OnSubmit"> </Button>

    }

</div>
@code {


    [Parameter]
    public string Id { get; set; }
    public EditUserDataViewModel Model { get; set; } = new EditUserDataViewModel();
    private bool isReady = false;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    protected override async Task OnInitializedAsync()
    {
#if DEBUG
        //Thread.Sleep(10000);
#endif
        try
        {
            //获取词条信息
            Model = await Http.GetFromJsonAsync<EditUserDataViewModel>(ToolHelper.WebApiPath + "api/space/edituserdata/");
            isReady = true;
        }
        catch
        {
            await ToastService.Error("无法连接到服务器", "请确保网络正常后联系开发人员");
        }
    }

    private async Task OnSubmit()
    {
        //上传
        try
        {
            //处理时间
            if (Model.Birthday != null)
            {
                Model.Birthday = Model.Birthday.Value.AddHours(Model.Birthday.Value.Hour < 12 ? (12 - Model.Birthday.Value.Hour) : 0);
            }
            var result = await Http.PostAsJsonAsync<EditUserDataViewModel>(ToolHelper.WebApiPath + "api/space/edituserdata", Model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("保存用户信息失败", obj.Error);
            }
            else
            {
                var userState = await authenticationStateTask;
                var user = userState.User;
                SwalOption op = null;
                if (user.Identity.Name == Model.UserName)
                {
                    op = new SwalOption()
                    {
                        Category = SwalCategory.Success,
                        Title = "修改个人资料成功",
                        Content = "我们需要对你的修改进行审核，在通过审核之前你的修改对其他用户不可见",
                        ShowClose = false
                    };
                }
                else
                {

                    op = new SwalOption()
                    {
                        Category = SwalCategory.Success,
                        Title = "修改用户名成功",
                        Content = "我们需要对你的修改进行审核，通过后重新登入即可生效",
                        ShowClose = false
                    };
                }
                op.ButtonTemplate = new RenderFragment(builder =>
                {
                    builder.OpenComponent<Button>(0);
                    builder.AddAttribute(1, nameof(Button.Text), "我知道了");
                    builder.AddAttribute(2, nameof(Button.Icon), "fa fa-check");
                    builder.AddAttribute(3, nameof(Button.Color), Color.Success);
                    builder.AddAttribute(4, nameof(Button.IsOutline),true);
                    builder.AddAttribute(5, nameof(Button.OnClick), EventCallback.Factory.Create<MouseEventArgs>(this, async () =>
                    {
                        await op.Close();
                        NavigationManager.NavigateTo("/space/index/" + Model.Id, "个人空间", "fa fa-star-o");
                    }));
                    builder.CloseComponent();
                });
                await SwalService.Show(op);
            }
        }
        catch
        {
            await ToastService.Error("保存用户信息失败", "发生了未预料的异常，请联系开发人员");
        }
    }
    private  Task OnCardUpload1(string url)
    {

        Model.PhotoPath = url;
        Model.PhotoName = url;
        return Task.CompletedTask;

    }
    private Task OnCardUpload2(string url)
    {
        Model.BackgroundPath = url;
        Model.BackgroundName = url;
        return Task.CompletedTask;
    }

    private Task OnCardUpload3(string url)
    {
        Model.MBgImagePath = url;
        Model.MBgImageName = url;
        return Task.CompletedTask;
    }
    private  Task OnCardUpload4(string url)
    {
        Model.SBgImageName = url;
        Model.SBgImagePath = url;
        return Task.CompletedTask;

    }
    private async Task<bool> OnCardDelete1(string file)
    {
        Model.PhotoName = "";
        return true;
    }
    private async Task<bool> OnCardDelete2(string file)
    {
        Model.BackgroundName = "";
        return true;
    }
    private async Task<bool> OnCardDelete3(string file)
    {
        Model.MBgImageName = "";
        return true;
    }
    private async Task<bool> OnCardDelete4(string file)
    {
        Model.SBgImageName = "";
        return true;
    }

}

@page "/space/EditSpaceFavoriteObjects/{Id}/{Name}/{ReturnUrl}"
@page "/space/EditSpaceFavoriteObjects/{Id}/{Name}"
@attribute [Authorize]


@inject HttpClient Http
@inject ToastService? ToastService

@inject NavigationManager NavigationManager

<Title Text="SDAlliance_软萌"></Title>


@if (isReady == false)
{
    <div class="  rounded shadow  bg-opacity rounded ps-4 pe-4 pt-4 pb-4">
        <h3 class="text-truncate mb-4 fw-bold">管理收藏夹</h3>
        <h5 class=" mb-4 fw-bold">当前收藏夹：</h5>
        <hr>

        <div>
            <SkeletonParagraph />
            <div class="mt-2">
            </div>
            <SkeletonParagraph />
            <div class="mt-2">
            </div>
            <SkeletonParagraph />
            <div class="mt-2">
            </div>
            <SkeletonParagraph />
            <div class="mt-2">
            </div>
            <SkeletonParagraph />
        </div>
    </div>
}
else
{

    <ValidateForm Model="@Model" ValidateAllProperties="true" class="form-group mt-4">

        <div class="  rounded shadow  bg-opacity rounded ps-4 pe-4 pt-4 pb-4 mb-3">
            <h3 class="text-truncate mb-4 fw-bold">编辑收藏夹基本信息</h3>
            <h5 class="mb-4 fw-bold">当前收藏夹：@(ToolHelper.Base64DecodeName(Name))</h5>
            <hr />

            <div class="row">
                <div class=" col-6 col-md-4 col-lg-3 mt-2">
                    <ImageCropperButton ImagePath="@Model.MainImagePath" OnUploadedImage="OnCardUpload1" EntryType_="EntryType.Game" IsMainImage="true"
                                        Text="上传缩略图" IsMustCropper="true"></ImageCropperButton>
                </div>
            </div>

            <div class="row  mt-4">
                <div class="form-group col-12  col-sm-6">
                    <BootstrapInput @bind-Value="Model.Name" />
                </div>
                <div class="form-group col-12 col-sm-6">
                    <Switch @bind-Value="Model.IsDefault" />
                </div>
                <div class="form-group col-12">
                    <BootstrapInput @bind-Value="Model.BriefIntroduction" />
                </div>
            </div>



        </div>
    </ValidateForm>


}
<div class="">
    <EditFavoriteObjectesTip Id="@Id" Title="管理收藏的词条和文章" OnClickUrl="OnClickUrl"></EditFavoriteObjectesTip>
</div>
<div class="  rounded shadow  bg-opacity rounded ps-4 pe-4 pt-3 pb-3 mb-4">
    <div>
        <Button style="width: 100px" @onclick="@(() => OnSubmit())" IsAsync="true" Color="Color.Success" IsOutline="true" Icon="fa fa-check" Text="完成"></Button>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string Name { get; set; }
    [Parameter]
    public string ReturnUrl { get; set; }
    public EditFavoriteFolderViewModel Model { get; set; } = new EditFavoriteFolderViewModel();
    bool isReady = false;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            //获取词条信息
            Model = await Http.GetFromJsonAsync<EditFavoriteFolderViewModel>(ToolHelper.WebApiPath + "api/favorites/EditFavoriteFolder/" + Id);
            isReady = true;
        }
        catch
        {
            await ToastService.Error("无法连接到服务器", "请确保网络正常后联系开发人员");
        }
    }


    private async Task OnSubmit()
    {
        //上传
        try
        {
            //处理数据
            if (string.IsNullOrWhiteSpace(Model.Name))
            {
                await ToastService.Error("必须填写收藏夹名称", "必须填写收藏夹名称");
                return;
            }


            var result = await Http.PostAsJsonAsync<EditFavoriteFolderViewModel>(ToolHelper.WebApiPath + "api/favorites/EditFavoriteFolder", Model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("保存收藏夹基本信息失败", obj.Error);
            }
            else
            {
                await ToastService.Success("保存收藏夹基本信息成功", "保存收藏夹基本信息成功");

                //获取用户收藏夹相关信息 只需要获取一次
                var userState = await authenticationStateTask;
                var user = userState.User;
                string userId = string.Empty;
                foreach (var item in user.Claims)
                {
                    if (item.Type == "userid")
                    {
                        userId = item.Value;
                    }
                }
                if (string.IsNullOrWhiteSpace(ReturnUrl)==false)
                {
                    NavigationManager.NavigateTo(ToolHelper.Base64DecodeUrl(ReturnUrl), "管理收藏夹", "fa fa-folder-open");
                }
                else
                {
                    NavigationManager.NavigateTo("/space/index/" + userId, user.Identity.Name, "fa fa-star-o");
                }
            }
        }
        catch
        {
            await ToastService.Error("保存收藏夹基本信息失败", "发生了未预料的异常，请联系开发人员");
        }
    }

    public async void OnClickUrl(NavigateModel model)
    {
        try
        {
            NavigationManager.NavigateTo(model.Url, model.Title, model.Icon);
        }
        catch
        {
            await ToastService.Error("导航失败", "请尝试刷新页面");
        }
    }

    private Task OnCardUpload1(string url)
    {
        Model.MainImage = url;
        Model.MainImagePath = url;
        return Task.CompletedTask;
    }
}

@page "/account/changephonenumber/{*ReturnUrl}"
@attribute [Authorize]

@inject HttpClient Http
@inject ExamineService _examineService
@inject ILocalStorageService _localStorage
@inject ToastService? ToastService
@inject IAppHelper _appHelper
@inject NavigationManager NavigationManager


<Title Text="SDAlliance_软萌"></Title>


@if (isReady == false)
{
    <SecondAuthenticationCheckTip ReturnUrl="@ReturnUrl" OnPassed="OnPassed"></SecondAuthenticationCheckTip>
}
else
{

    if (state == "输入新手机号码")
    {
        <div class="rounded   rounded shadow  bg-opacity  p-3">

            <h3 class="mb-4 text-center">请输入新手机号码</h3>
            <ValidateForm Model="@ModelBefore" OnValidSubmit="ConfirmEmailBefore" ValidateAllProperties="true" class="form-group  mb-0">

                <div class="row">
                    <div class="form-group col-12  col-sm-12">
                        <BootstrapInput @bind-Value="ModelBefore.NewPhone" />
                    </div>
                    <div class="form-group col-12">
                        <Button Color="Color.Primary" ButtonType="ButtonType.Submit" IsAsync="true" style="width:100%">确定</Button>
                    </div>

                </div>
            </ValidateForm>
        </div>
    }
    else if (state == "验证新手机号码")
    {
        <div class="rounded   rounded shadow  bg-opacity  p-3">

            <h3 class="mb-3 text-center">验证手机号码</h3>
            <p class="mb-4">我们已经向<strong>@(ModelBefore.NewPhone)</strong>发送了一封验证短信，请在下方填写其中的验证码</p>
            <ValidateForm Model="@ModelAfter" OnValidSubmit="ConfirmEmailAfter" ValidateAllProperties="true" class="form-group mt-4  mb-0">

                <div class="row">
                    <div class="form-group col">
                        <BootstrapInput @bind-Value="ModelAfter.NumToken" />
                    </div>
                    <div class="form-group col-auto" style=" display: flex; align-items: flex-end;">
                        <PostVerificationCodeTip Email="@ModelBefore.NewPhone" SmsType="Models.SMSType.ChangeMobilePhoneNumber"></PostVerificationCodeTip>
                    </div>
                    <div class="form-group col-12">
                        <Button Color="Color.Primary" ButtonType="ButtonType.Submit" IsAsync="true" style="width:100%">验证</Button>
                    </div>

                </div>
            </ValidateForm>
        </div>

    }
}



@code {
    [Parameter]
    public string ReturnUrl { get; set; }

    private ChangePhoneNumberBeforeModel ModelBefore = new ChangePhoneNumberBeforeModel();
    private ChangePhoneNumberAfterModel ModelAfter = new ChangePhoneNumberAfterModel();
    public string Email { get; set; }
    string state = "输入新手机号码";
    bool isReady = false;


    private Task OnPassed()
    {
        isReady = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task ConfirmEmailBefore(EditContext context)
    {
        if (string.IsNullOrWhiteSpace(ModelBefore.NewPhone))
        {
            await ToastService.Error("请输入手机号码", "请输入手机号码");
            return;
        }
        try
        {

            ModelBefore.LoginKey = ToolHelper.LoginKey;

            var result = await Http.PostAsJsonAsync<ChangePhoneNumberBeforeModel>(ToolHelper.WebApiPath + "api/account/ChangePhoneNumberBefore", ModelBefore);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("修改手机号码失败", obj.Error);
            }
            else
            {
                state = "验证新手机号码";
                StateHasChanged();
            }
        }
        catch
        {
            await ToastService.Error("验证邮箱失败", "发生了未预料的异常，请联系开发人员");
        }
    }
    private async Task ConfirmEmailAfter(EditContext context)
    {
        try
        {
            ModelAfter.NewPhone = ModelBefore.NewPhone;
            ModelAfter.LoginKey = ModelBefore.LoginKey;

            var result = await Http.PostAsJsonAsync<ChangePhoneNumberAfterModel>(ToolHelper.WebApiPath + "api/account/ChangePhoneNumberAfter", ModelAfter);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("验证新手机号码失败", obj.Error);
            }
            else
            {
                await ToastService.Success("修改手机号码成功", "修改手机号码成功");
                NavigationManager.NavigateTo(string.IsNullOrWhiteSpace(ReturnUrl) ? "/" : ToolHelper.Base64DecodeUrl(ReturnUrl));
            }
        }
        catch
        {
            await ToastService.Error("验证新手机号码失败", "发生了未预料的异常，请联系开发人员");
        }
    }
}

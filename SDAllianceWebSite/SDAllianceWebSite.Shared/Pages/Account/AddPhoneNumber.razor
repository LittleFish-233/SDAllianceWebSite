@page "/account/addphonenumber/{*returnURL}"

@inject HttpClient Http
@inject ExamineService _examineService
@inject ILocalStorageService _localStorage
@inject ToastService? ToastService
@inject IAppHelper _appHelper
@inject NavigationManager NavigationManager


<Title Text="SDAlliance_软萌"></Title>



<div class="rounded   rounded shadow  bg-opacity  p-3">
    @if (isReady == false)
    {
        <h3 class="mb-4 text-center">请输入要绑定的手机号码</h3>
        <ValidateForm Model="@Model" OnValidSubmit="GetPhone" ValidateAllProperties="true" class="form-group col-12  mb-0">

            <div class="row">
                <div class="form-group col-12  col-sm-12">
                    <BootstrapInput @bind-Value="Model.Phone" DisplayText="手机号码" />
                </div>
                <div class="form-group col-12">
                    <Button Color="Color.Primary" ButtonType="ButtonType.Submit" IsAsync="true" style="width:100%">确定</Button>
                </div>

            </div>
        </ValidateForm>
    }
    else
    {
            <h3 class="mb-3 text-center">验证手机号码</h3>
            <p class="mb-4">我们已经向<strong>@(Model.Phone)</strong>发送了一封验证短信，请在下方填写其中的验证码。</p>
            <ValidateForm Model="@AfterModel" OnValidSubmit="ConfirmNumToken" ValidateAllProperties="true" class="form-group col-12 mt-4  mb-0">

                <div class="row">
                    <div class="form-group col">
                        <BootstrapInput @bind-Value="AfterModel.NumToken" />
                    </div>
                    <div class="form-group col-auto" style=" display: flex; align-items: flex-end;">
                        <PostVerificationCodeTip Email="@Model.Phone" LoginKey="@ToolHelper.LoginKey" SmsType="Models.SMSType.Register" ></PostVerificationCodeTip>
                    </div>
                    <div class="form-group col-12">
                        <Button Color="Color.Primary" ButtonType="ButtonType.Submit" IsAsync="true" style="width:100%">验证</Button>
                    </div>

                </div>
            </ValidateForm>
    }

</div>

@code {
    [Parameter]
    public string returnURL { get; set; }

    private AddPhoneNumberModel Model = new AddPhoneNumberModel();

    private ConfirmAddPhoneNumberModel AfterModel = new ConfirmAddPhoneNumberModel();
    bool IsConfirmed = false;
    bool isReady = false;

    private async Task GetPhone(EditContext context)
    {
        if (string.IsNullOrWhiteSpace(Model.Phone))
        {
            await ToastService.Error("请输入手机号码", "请输入手机号码");
            return;
        }
        try
        {
            Model.LoginToken = ToolHelper.LoginKey;

            var result = await Http.PostAsJsonAsync<AddPhoneNumberModel>(ToolHelper.WebApiPath + "api/account/AddPhoneNumber", Model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("获取验证码失败", obj.Error);
                return;
            }
            else
            {
                isReady = true;
                StateHasChanged();
            }
        }
        catch
        {
            await ToastService.Error("无法连接到服务器", "请确保网络正常后联系开发人员");
        }

    }


    private async Task ConfirmNumToken(EditContext context)
    {
        try
        {
            AfterModel.LoginToken = Model.LoginToken;
            AfterModel.Phone = Model.Phone;

            var result = await Http.PostAsJsonAsync<ConfirmAddPhoneNumberModel>(ToolHelper.WebApiPath + "api/account/ConfirmAddPhoneNumber", AfterModel);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("绑定手机号码失败", obj.Error);
                return;
            }
            else
            {
                await ToastService.Success("绑定手机号码成功", "绑定手机号码成功，正在跳转");

                NavigationManager.NavigateTo(string.IsNullOrWhiteSpace( returnURL)?"/":ToolHelper.Base64DecodeUrl(returnURL));
            }
        }
        catch
        {
            await ToastService.Error("绑定手机号码失败", "发生了未预料的异常，请联系开发人员");
        }
    }
}

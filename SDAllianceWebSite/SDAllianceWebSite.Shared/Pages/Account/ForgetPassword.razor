@page "/account/forgetpassword"

@inject HttpClient Http
@inject ExamineService _examineService
@inject ILocalStorageService _localStorage
@inject ToastService? ToastService
@inject IAppHelper _appHelper
@inject NavigationManager NavigationManager


<Title Text="SDAlliance_软萌"></Title>


<div class="rounded   rounded shadow  bg-opacity  p-3">
    @if (isReady == false)
    {
    <h3 class="mb-4 text-center">请输入绑定的邮箱或手机号码</h3>
        <ValidateForm Model="@Model" OnValidSubmit="GetEmail" ValidateAllProperties="true" class="form-group col-12  mb-0">

            <div class="row">
                <div class="form-group col-12  col-sm-12">
                    <BootstrapInput @bind-Value="Model.Mail" DisplayText="绑定的邮箱或手机号码" />
                </div>
                <div class="form-group col-12">
                    <Button Color="Color.Primary" ButtonType="ButtonType.Submit" IsAsync="true" style="width:100%">确定</Button>
                </div>

            </div>
        </ValidateForm>
    }
    else
    {
        @if (IsConfirmed == false)
        {
            @if (Model.Mail.Contains("@"))
            {
                <h3 class="mb-3 text-center">验证电子邮箱</h3>
                <p class="mb-4">我们已经向<strong>@(Model.Mail)</strong>发送了一封验证邮件，请在下方填写其中的验证码。如果没有在收件箱找到邮件，请检查垃圾箱。</p>
            }
            else
            {
                <h3 class="mb-3 text-center">验证手机号码</h3>
                <p class="mb-4">我们已经向<strong>@(Model.Mail)</strong>发送了一封验证短信，请在下方填写其中的验证码</p>
            }
            <ValidateForm Model="@Model" OnValidSubmit="ConfirmNumToken" ValidateAllProperties="true" class="form-group col-12 mt-4  mb-0">

                <div class="row">
                    <div class="form-group col">
                        <BootstrapInput @bind-Value="Model.NumToken" />
                    </div>
                    <div class="form-group col-auto" style=" display: flex; align-items: flex-end;">
                        <PostVerificationCodeTip Email="@Model.Mail"></PostVerificationCodeTip>
                    </div>
                    <div class="form-group col-12">
                        <Button Color="Color.Primary" ButtonType="ButtonType.Submit" IsAsync="true" style="width:100%">验证</Button>
                    </div>

                </div>
            </ValidateForm>
        }
        else
        {
            <h3 class="mb-4 text-center">请输入新密码</h3>
            <ValidateForm Model="@Model" OnValidSubmit="ConfirmPassword" ValidateAllProperties="true" class="form-group col-12  mb-0">

                <div class="row">
                    <div class="form-group col-12  col-sm-12">
                        <BootstrapInput @bind-Value="Model.Password" type="password" />
                    </div>
                    <div class="form-group col-12  col-sm-12">
                        <BootstrapInput @bind-Value="Model.ConfirmPassword" type="password" />
                    </div>
                    <div class="form-group col-12">
                        <Button Color="Color.Primary" ButtonType="ButtonType.Submit" IsAsync="true" style="width:100%">确定</Button>
                    </div>

                </div>
            </ValidateForm>
        }
    }

</div>

@code {
    private ForgetPasswordModel Model = new ForgetPasswordModel();
    bool IsConfirmed = false;
    bool isReady = false;

    private async Task GetEmail(EditContext context)
    {
        if (string.IsNullOrWhiteSpace(Model.Mail))
        {
            await ToastService.Error("请输入邮箱或手机号码", "请输入邮箱或手机号码");
            return;
        }
        try
        {
            var result = await Http.GetFromJsonAsync<Result>(ToolHelper.WebApiPath + "api/account/ForgetPassword/" + Model.Mail);
            if (result.Successful == true)
            {
                isReady = true;
                StateHasChanged();
            }
            else
            {
                await ToastService.Error("无法获取验证码", result.Error);

            }
        }
        catch(Exception exc)
        {
            await ToastService.Error("无法连接到服务器", "请确保网络正常后联系开发人员");
        }

    }


    private async Task ConfirmNumToken(EditContext context)
    {
        try
        {
            var result = await Http.PostAsJsonAsync<CheckVerificationCodeModel>(ToolHelper.WebApiPath + "api/account/CheckVerificationCode", new CheckVerificationCodeModel { Num = Model.NumToken });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("验证码错误", obj.Error);
                return;
            }
            else
            {
                IsConfirmed = true;
                StateHasChanged();
            }
        }
        catch
        {
            await ToastService.Error("验证码错误", "发生了未预料的异常，请联系开发人员");
        }
    }

    private async Task ConfirmPassword(EditContext context)
    {
        try
        {

            var result = await Http.PostAsJsonAsync<ForgetPasswordModel>(ToolHelper.WebApiPath + "api/account/ConfirmForgetPassword", Model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("修改密码失败", obj.Error);
                if (obj.Error == "验证码错误")
                {
                    IsConfirmed = false;
                    StateHasChanged();
                }
            }
            else
            {
                await ToastService.Success("修改密码成功", "修改密码成功，请登入");
                NavigationManager.NavigateTo("/account/login");
            }
        }
        catch
        {
            await ToastService.Error("修改密码失败", "发生了未预料的异常，请联系开发人员");
        }
    }

}

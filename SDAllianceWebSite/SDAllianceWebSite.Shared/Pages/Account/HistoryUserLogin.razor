@page "/account/historyuserlogin/{*ReturnUrl}"

@inject HttpClient Http
@inject SwalService SwalService
@inject ILocalStorageService _localStorage
@inject ToastService? ToastService
@inject IAppHelper _appHelper
@inject NavigationManager NavigationManager


<Title Text="SDAlliance_软萌"></Title>


<div class="rounded   rounded shadow  bg-opacity  p-3">

    @if (IsConfirmed == false)
    {
        <h3 class="mb-3 text-center">验证身份</h3>
        <p class="mb-4" >十分抱歉呐，网站翻新后我们需要重新验证你的身份哦，不过没关系，我们已经向你的邮箱发送了一封验证邮件，请在下方填写其中的验证码。如果没有在收件箱找到邮件，还请检查一下垃圾箱</p>
        <ValidateForm Model="@Model" OnValidSubmit="ConfirmNumToken" ValidateAllProperties="true" class="form-group col-12 mt-4  mb-0">

            <div class="row">
                <div class="form-group col">
                    <BootstrapInput @bind-Value="Model.NumToken" />
                </div>
                <div class="form-group col-auto" style=" display: flex; align-items: flex-end;">
                    <PostVerificationCodeTip UserName="@ToolHelper.UserName" IsFrist="false"></PostVerificationCodeTip>
                </div>
                <div class="form-group col-12">
                    <Button Color="Color.Primary" ButtonType="ButtonType.Submit" IsAsync="true" style="width:100%">验证</Button>
                </div>

            </div>
        </ValidateForm>
    }
    else
    {
        <h3 class="mb-3 text-center">设置密码</h3>
        <p class="mb-4" >身份验证通过了，恭喜恭喜，为了确保阁下的安全，还请重新设置密码</p>
        <ValidateForm Model="@Model" OnValidSubmit="ConfirmPassword" ValidateAllProperties="true" class="form-group col-12  mb-0">

            <div class="row">
                <div class="form-group col-12  col-sm-12">
                    <BootstrapInput @bind-Value="Model.Password" type="password" />
                </div>
                <div class="form-group col-12  col-sm-12">
                    <BootstrapInput @bind-Value="Model.ConfirmPassword" type="password" />
                </div>
                <div class="form-group col-12">
                    <Button Color="Color.Primary" ButtonType="ButtonType.Submit" IsAsync="true" style="width:100%">确定</Button>
                </div>

            </div>
        </ValidateForm>
    }

</div>

@code {
    [Parameter]
    public string ReturnUrl { get ;set;  }

    private HistorUserChangePasswordModel Model = new HistorUserChangePasswordModel();
    bool IsConfirmed = false;
    bool isReady = false;


    private async Task ConfirmNumToken(EditContext context)
    {
        try
        {
            var result = await Http.PostAsJsonAsync<CheckVerificationCodeModel>(ToolHelper.WebApiPath + "api/account/CheckVerificationCode", new CheckVerificationCodeModel { Num = Model.NumToken });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("验证码错误", obj.Error);
                return;
            }
            else
            {
                IsConfirmed = true;
                StateHasChanged();
            }
        }
        catch
        {
            await ToastService.Error("验证码错误", "发生了未预料的异常，请联系开发人员");
        }
    }

    private async Task ConfirmPassword(EditContext context)
    {
        try
        {
            //填充其他字段以通过验证
            Model.UserName = ToolHelper.UserName;

            var result = await Http.PostAsJsonAsync<HistorUserChangePasswordModel>(ToolHelper.WebApiPath + "api/account/HistorUserChangePassword", Model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("验证身份失败", obj.Error);
                if (obj.Error == "验证码错误")
                {
                    IsConfirmed = false;
                    StateHasChanged();
                }

            }
            else
            {
                await SwalService.ShowModal(new SwalOption()
                {
                    IsConfirm = true,
                    Category = SwalCategory.Success,
                    Title = "验证身份成功",
                    Content = "验证身份成功，密码已重置，请重新登入"
                });
               // await ToastService.Success("验证身份成功", "验证身份成功，请登入");
                NavigationManager.NavigateTo(string.IsNullOrWhiteSpace(ReturnUrl)?"/account/login/":ToolHelper.Base64DecodeUrl(ReturnUrl));
            }
        }
        catch
        {
            await ToastService.Error("验证身份失败", "发生了未预料的异常，请联系开发人员");
        }
    }

}

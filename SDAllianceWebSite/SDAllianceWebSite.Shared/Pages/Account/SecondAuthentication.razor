@page "/account/SecondAuthentication/{*ReturnUrl}"

@attribute [Authorize]


@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IAppHelper _appHelper
@inject ToastService? ToastService

@inject IAuthService AuthService
@inject SwalService SwalService
@inject HttpClient Http

<Title Text="SDAlliance_软萌"></Title>

    @if (Type == SecondAuthenticationType.None)
    {
        <div class="rounded  rounded shadow  bg-opacity  p-3">
            <h3 class="mb-3 text-center">我们需要验证你的身份</h3>
            <p class="mb-4 text-center">你正在修改或访问敏感信息，在此之前我们需要验证你的身份，你可以选择下方任一一种方式进行验证</p>
            <div class="row">
                <div class="form-group col-12">
                    @if (ToolHelper.UserAuthenticationTypeModel.IsOnPhone==false)
                    {
                        <Button Color="Color.Primary" style="width:100%" Text=" 手机号码" IsOutline="false" IsDisabled="true" Icon="fa fa-phone" Size="Size.None" @onclick="OnClickPhone"></Button>
                    }
                    else
                    {
                        <Button Color="Color.Primary" style="width:100%" Text=" 手机号码" IsOutline="true" Icon="fa fa-phone" Size="Size.None" @onclick="OnClickPhone"></Button>
                    }
                </div>
                <div class="form-group col-12">
                    @if (ToolHelper.UserAuthenticationTypeModel.IsOnEmail==false)
                    {
                        <Button Color="Color.Primary" style="width:100%" Text=" 电子邮箱" IsOutline="false" IsDisabled="true" Icon="fa fa-envelope-o" Size="Size.None" @onclick="OnClickEmail"></Button>
                    }
                    else
                    {
                        <Button Color="Color.Primary" style="width:100%" Text=" 电子邮箱" IsOutline="true" Icon="fa fa-envelope-o" Size="Size.None" @onclick="OnClickEmail"></Button>
                    }
                </div>
            </div>
        </div>
    }
    else if (Type == SecondAuthenticationType.Email)
    {
        <div class="rounded  rounded shadow  bg-opacity  p-3">
            <h3 class="mb-3 text-center">验证电子邮箱</h3>
            <p class="mb-4" >我们已经向你的电子邮箱发送了一封验证邮件，请在下方填写其中的验证码。如果没有在收件箱找到邮件，请检查垃圾箱</p>
            <ValidateForm Model="@Model" OnValidSubmit="HandleConfirm" ValidateAllProperties="true" class="form-group mt-4  mb-0">

                <div class="row">
                    <div class="form-group col">
                        <BootstrapInput @bind-Value="Model.NumToken" />
                    </div>
                    <div class="form-group col-auto" style=" display: flex; align-items: flex-end;">
                        <PostVerificationCodeTip SendType="SendType.Email"></PostVerificationCodeTip>
                    </div>
                    <div class="form-group col-12">
                        <Button Color="Color.Primary" ButtonType="ButtonType.Submit" IsAsync="true" style="width:100%">验证</Button>
                    </div>

                </div>
            </ValidateForm>

        </div>
    }
    else if (Type == SecondAuthenticationType.Phone)
    {
        <div class="rounded  rounded shadow  bg-opacity  p-3">
            <h3 class="mb-3 text-center">验证手机号码</h3>
            <p class="mb-4">我们已经向你的手机号码发送了一封验证短信，请在下方填写其中的验证码</p>
            <ValidateForm Model="@Model" OnValidSubmit="HandleConfirm" ValidateAllProperties="true" class="form-group mt-4  mb-0">

                <div class="row">
                    <div class="form-group col">
                        <BootstrapInput @bind-Value="Model.NumToken" />
                    </div>
                    <div class="form-group col-auto" style=" display: flex; align-items: flex-end;">
                        <PostVerificationCodeTip  SendType="SendType.Phone"></PostVerificationCodeTip>
                    </div>
                    <div class="form-group col-12">
                        <Button Color="Color.Primary" ButtonType="ButtonType.Submit" IsAsync="true" style="width:100%">验证</Button>
                    </div>

                </div>
            </ValidateForm>

        </div>
    }


@code {

    [Parameter]
    public string ReturnUrl { get; set; }

    public SecondAuthenticationType Type { get; set; }

    public bool IsReady { get; set; }

    private SecondAuthenticationModel Model = new SecondAuthenticationModel();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    protected override async Task OnInitializedAsync()
    {
       /* if (ToolHelper.UserAuthenticationTypeModel.IsOnPhone == false && ToolHelper.UserAuthenticationTypeModel.IsOnEmail == true)
        {
            await OnClickEmail();
        }
        else if (ToolHelper.UserAuthenticationTypeModel.IsOnPhone == true && ToolHelper.UserAuthenticationTypeModel.IsOnEmail == false)
        {
            await OnClickPhone();
        }

        if(ToolHelper.UserAuthenticationTypeModel.IsOnPhone == false && ToolHelper.UserAuthenticationTypeModel.IsOnEmail == false)
        {
            await SwalService.ShowModal(new SwalOption()
            {
                Category = SwalCategory.Error,
                Title = "尝试验证身份失败",
                Content = "你的账户没有绑定任何一种验证方式，请尝试联系管理员"
            });
            NavigationManager.NavigateTo("/");
        }*/
    }

    private async Task OnClickPhone()
    {
        if (await OnSecondAuthentication())
        {
            Type = SecondAuthenticationType.Phone;
            StateHasChanged();

        }
    }
    private async Task OnClickEmail()
    {
        if(await OnSecondAuthentication())
        {
            Type = SecondAuthenticationType.Email;
            StateHasChanged();

        }
    }
    private async Task<bool> OnSecondAuthentication()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<Result>(ToolHelper.WebApiPath + "api/account/SecondAuthentication");
            if (result.Successful == true)
            {
                return true;
            }
            else
            {

                await ToastService.Error("无法获取验证码", result.Error);
                return false;

            }
        }
        catch (Exception exc)
        {
            await ToastService.Error("无法连接到服务器", "请确保网络正常后联系开发人员");
            return false;
        }
    }

    private async Task HandleConfirm(EditContext context)
    {

        try
        {

            var result = await Http.PostAsJsonAsync<SecondAuthenticationModel>(ToolHelper.WebApiPath + "api/account/SecondAuthentication",Model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("验证码错误", obj.Error);
                return;
            }
            else
            {
                ToolHelper.LoginKey = obj.Error;
                NavigationManager.NavigateTo(string.IsNullOrWhiteSpace(ReturnUrl) ? "/" : ToolHelper.Base64DecodeUrl(ReturnUrl));

            }
        }
        catch
        {
            await SwalService.ShowModal(new SwalOption()
            {
                Category = SwalCategory.Error,
                Title = "尝试验证身份失败",
                Content = "无法连接到服务器，请确保网络正常后联系开发人员"
            });
        }
    }

}

@page "/account/login/{*ReturnUrl}"
@page "/account/login/"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ToastService ToastService
@inject IJSRuntime JS
@inject HttpClient Http

@inject IIPLocatorProvider? IPLocator
@inject WebClientService? ClientService
@inject IAppHelper? _appHelper

<Title Text="SDAlliance_软萌"></Title>

@if (isReady)
{
    @if (isOnRedirecting)
    {
        <AccountWaitingTip Title="正在重定向" Subtitle="我们正在重定向到第三方登入页面，若长时间无响应，请尝试刷新页面"></AccountWaitingTip>
    }
    else
    {
        <div class="rounded  rounded shadow  bg-opacity  p-3">
            <h2 class="mb-4 text-center">欢迎，请登入</h2>
            <ValidateForm Model="@Model" OnValidSubmit="HandleLogin" ValidateAllProperties="true" class="form-group col-12 mt-4  mb-0">
                <div class="row">

                    <div class="form-group col-12  col-sm-12">
                        <BootstrapInput @bind-Value="Model.UserName" PlaceHolder="推荐使用邮箱登入" />
                    </div>
                    <div class="form-group col-12">
                        <BootstrapInput @bind-Value="Model.Password" PlaceHolder="请输入密码" type="password" />
                    </div>
                    <div class="form-group col-12">
                        <a style="float:right" href="/account/forgetpassword"  class="link-primary">忘记密码</a>

                        <div style="display:flex">
                            <Checkbox @bind-Value="Model.RememberMe" ShowAfterLabel="true" ShowLabel="false"></Checkbox>&nbsp;记住我
                        </div>
                    </div>
                    <div class="form-group col-6">
                        <Button Color="Color.Primary" ButtonType="ButtonType.Button" IsOutline="true" style="width:100%" @onclick="@(()=>OnRegister())">注册</Button>
                    </div>
                    <div class="form-group col-6">
                        <Button Color="Color.Primary" ButtonType="ButtonType.Submit" IsAsync="true" style="width:100%">登录</Button>
                    </div>
                    @if (ToolHelper.IsOnThirdPartyLogin)
                    {
                        <ThirdPartyLoginButtonListView ReturnUrl="@ReturnUrl" OnRedirecting="OnRedirecting"></ThirdPartyLoginButtonListView>
                    }
                </div>
            </ValidateForm>
        </div>
    }


}

@code {
    [Parameter]
    public string ReturnUrl { get; set; }

    private DotNetObjectReference<Login> objRef;

    bool isOnRedirecting = false;
    bool isReady = false;
    private int widgetId = -1;
    private LoginModel Model = new LoginModel();
    private string Rememer
    {
        get
        {
            return Model.RememberMe.ToString();
        }
        set
        {
            Model.RememberMe = bool.Parse(value);
        }
    }

    bool isSuccess = true;
    [Inject]
    [NotNull]
    private SwalService? SwalService { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            if(await AuthService.IsLogin())
            {
                NavigationManager.NavigateTo(string.IsNullOrWhiteSpace(ReturnUrl) ? "/" : ToolHelper.Base64DecodeUrl(ReturnUrl));
                return;
            }

            try
            {
                if (ToolHelper.IsSSR)
                {

                    NavigationManager.NavigateTo("https://app.ruanmeng.love/account/loginfromssr/" + ReturnUrl);
                    //NavigationManager.NavigateTo("/account/loginfromssr/" + ReturnUrl);

                }
                else
                {
                    isReady = true;
                    StateHasChanged();
                }

            }
            catch
            {
                await ToastService.Error("尝试跳转客户端模式失败", "尝试跳转客户端模式失败~");
            }
        }
    }

    private async Task HandleLogin(EditContext context)
    {
        await OnChecked("","");
    }

    [JSInvokable]
    public async Task OnChecked(string token, string randstr)
    {
        try
        {
            Model.token = token;
            Model.randstr = randstr;

            //判断是否需要验证
            /* string country;
             if (ToolHelper.IsSSR)
             {
                 //await ClientService.RetrieveRemoteInfo();
                 //country = ClientService.City;

             }
             else
             {
                country=await  _appHelper.GetIPCountiy("67.220.90.13");
             }*/
            Model.isNeedVerification = false;


            var result = await AuthService.Login(Model);

            switch (result.Code)
            {
                case LoginResultCode.OK:
                    NavigationManager.NavigateTo(string.IsNullOrWhiteSpace(ReturnUrl) ? "/" : ToolHelper.Base64DecodeUrl(ReturnUrl));
                    break;
                case LoginResultCode.HistoricalUser:
                    ToolHelper.UserName = result.ErrorInfor;
                    NavigationManager.NavigateTo("/account/historyuserlogin/" + ToolHelper.Base64EncodeUrl(NavigationManager.Uri));
                    break;
                case LoginResultCode.FailedRealNameValidation:
                    ToolHelper.LoginKey = result.ErrorInfor;
                    NavigationManager.NavigateTo("/account/ChooseVerificationMethod/" + ToolHelper.Base64EncodeUrl(NavigationManager.Uri));
                    break;
                case LoginResultCode.FailedEmailValidation:
                    ToolHelper.UserName = result.ErrorInfor;
                    NavigationManager.NavigateTo("/account/ConfirmEmailRegister/" + ToolHelper.Base64EncodeUrl(NavigationManager.Uri));
                    break;
                default:
                    await ToastService.Error("登入失败", result.ErrorDescribe);
                    isSuccess = false;
                    break;
            }
        }
        catch (Exception exc)
        {
            await ToastService.Error("登入失败", "无法连接到服务器，请检查网络正常后联系管理员");
            isSuccess = false;
        }
    }
    [JSInvokable]
    public Task OnCancel()
    {
        isSuccess = false;
        return Task.CompletedTask;
    }

    private void OnRegister()
    {
        NavigationManager.NavigateTo("/account/register/" + ReturnUrl);
    }

    private Task OnRedirecting()
    {
        isOnRedirecting = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

}


@page "/articles/createarticle"
@attribute [Authorize]

@inject HttpClient Http
@inject ExamineService _examineService
@inject ILocalStorageService _localStorage
@inject ToastService? ToastService
@inject IAppHelper _appHelper
@inject NavigationManager NavigationManager


<Title Text="发表文章"></Title>


<div class="">
    <div class="" style="padding-right: 0;padding-left: 0;">
        <AlertTip Type="AlertTip.AlertTipType.Reward"></AlertTip>
        <AlertTip Type="AlertTip.AlertTipType.ArticleStandard"></AlertTip>
        <ValidateForm Model="@Model" ValidateAllProperties="true" @ref="ComplexForm">
            <div class="  rounded shadow  bg-opacity rounded ps-4 pe-4 pt-4 pb-4 mb-4">
                <h3 class="text-truncate mb-4 fw-bold">填写主要信息</h3>
                <hr />

                <div class="row">
                    <div class=" col-12 col-md-6 col-lg-4 col-xl-4 mt-2">
                        <ImageCropperButton ImagePath="@MainImagePath" OnUploadedImage="OnCardUploadMain" Type="ImageAspectType._16_9" Text="上传主图"></ImageCropperButton>
                    </div>
                    <div class="col-12 col-md-6 col-lg-4 col-xl-4 mt-2">
                        <ImageCropperButton ImagePath="@BackImagePath" OnUploadedImage="OnCardUploadBack" Type="ImageAspectType.None" Text="上传大背景图"></ImageCropperButton>
                    </div>
                    <div class="col-12 col-md-6 col-lg-4 col-xl-4 mt-2">
                        <ImageCropperButton ImagePath="@SmallBackImagePath" OnUploadedImage="OnCardUploadSmall" Type="ImageAspectType.None" Text="上传小背景图"></ImageCropperButton>
                    </div>
                </div>

                <div class="form-group mt-4">
                    <div class="row">
                        <div class="form-group col-12  col-sm-6">
                            <Select @bind-Value="Model.Type"></Select>
                        </div>
                        <div class="form-group col-12  col-sm-6">
                            <BootstrapInput @bind-Value="Model.Name" />
                        </div>

                        <div class="form-group col-12  col-sm-6">
                            <div class="mb-3">
                                <AlertTip Type="AlertTip.AlertTipType.CreateDisambig"></AlertTip>
                            </div>
                            <BootstrapInput @bind-Value="Model.DisplayName" />
                        </div>
                        <div class="form-group col-12">
                            <BootstrapInput @bind-Value="Model.BriefIntroduction" />
                        </div>
                        <div class="form-group col-12">
                            <hr />
                        </div>
                        <div class="form-group col-12  col-sm-6">
                            <BootstrapInput @bind-Value="Model.OriginalAuthor" />
                        </div>

                        <div class="form-group col-12  col-sm-6">
                            <DateTimePicker @bind-Value="@Model.PubishTime" />
                        </div>
                        <div class="form-group col-12">
                            <BootstrapInput @bind-Value="Model.OriginalLink" />
                        </div>
                        @if (Model.Type == ArticleType.News)
                        {
                            <div class="form-group col-12">
                                <hr />
                            </div>
                            <div class="col-12">
                                <div class="alert alert-warning  rounded shadow  rounded" role="alert">
                                    请选择该动态发生时的真实时间，我们会据此生成时间轴
                                </div>
                            </div>

                            <div class="form-group col-12  col-sm-6">
                                <DateTimePicker @bind-Value="@Model.RealNewsTime" />
                            </div>
                        }
                    </div>
                </div>


            </div>
        </ValidateForm>
        <div class="  rounded shadow  bg-opacity rounded ps-4 pe-4 pt-4 pb-4 mb-4">
            <h3 class="text-truncate mb-4 fw-bold">编辑正文</h3>
            <hr class="mb-4" />

            @if (isReady == true)
            {
                <MarkdownEditorTip @ref="markdownEditorTip"></MarkdownEditorTip>
            }


        </div>
        <div class="alert alert-warning  rounded shadow  rounded" role="alert">
            我们会根据名称自动关联词条。未填写的词条将会自动忽略，不需要手动删除
        </div>
        <div class=" rounded shadow  bg-opacity rounded ps-4 pe-4 pt-4 pb-4 mb-4">
            <h3 class="text-truncate mb-4 fw-bold">
                添加关联词条
            </h3>
            <hr />
            <InputRelevancesListTip AutoCompleteItems="@ArticleItems" Model="Model.articles" Title="文章"></InputRelevancesListTip>
            <hr class="mt-4" />
            <InputOtherLinkListTip Model="Model.others" Title="自定义链接"></InputOtherLinkListTip>
        </div>

        <div class="alert alert-warning  rounded shadow  rounded" role="alert">
            当你点击“完成”按钮时，将会立即发起审核请求，请在点击前确保内容正确无误
        </div>
        <div class="alert alert-success  rounded shadow  rounded" role="alert">
            你不需要一次性把文章写完，可以在醒目位置备注“延迟审核”，在提交后慢慢修改
        </div>
        <ValidateForm Model="@Model" ValidateAllProperties="true">

            <div class="  rounded shadow  bg-opacity rounded ps-4 pe-4 pt-3 pb-3 mb-4">
                <div>
                    <BootstrapBlazor.Components.Textarea @bind-Value="Model.Note" DisplayText="备注" />
                    <Button class="mt-3" style="width: 100px" @onclick="@(() => OnSubmit())" IsAsync="true" Color="Color.Success" IsOutline="true" Icon="fa fa-check" Text="完成"></Button>
                </div>
            </div>

        </ValidateForm>
    </div>
</div>


@code {
    private CreateArticleViewModel Model { get; set; } = new CreateArticleViewModel
    {
        articles = new List<RelevancesModel>(),
        others = new List<RelevancesModel>(),
    };
    private string MainImagePath { get; set; } = "_content/SDAllianceWebSite.Shared/images/default/app.png";
    private string BackImagePath { get; set; } = "_content/SDAllianceWebSite.Shared/images/default/app.png";
    private string SmallBackImagePath { get; set; } = "_content/SDAllianceWebSite.Shared/images/default/app.png";
    [NotNull]
    private ValidateForm? ComplexForm { get; set; }

    private bool isReady = false;
    private IEnumerable<string> ArticleItems { get; set; } = new string[1] { "" };

    [NotNull]
    private MarkdownEditorTip? markdownEditorTip;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            //获取所有文章
            ArticleItems = await Http.GetFromJsonAsync<List<string>>(ToolHelper.WebApiPath + "api/articles/GetAllArticles");

            isReady = true;
        }
        catch
        {
            await ToastService.Error("无法连接到服务器", "请确保网络正常后联系开发人员");
        }
    }

    private async Task OnSubmit()
    {
        try
        {
            Model.Context = await markdownEditorTip.GetContext();
            //处理数据
            if (string.IsNullOrWhiteSpace(Model.Name) || string.IsNullOrWhiteSpace(Model.BriefIntroduction) || string.IsNullOrWhiteSpace(Model.DisplayName))
            {
                await ToastService.Error("创建文章失败", "请填写所有必填项目");
                return;
            }
            if (string.IsNullOrWhiteSpace(Model.Context))
            {
                await ToastService.Error("创建文章失败", "必须输入文章正文");
                return;
            }
            //检查文本长度
            if (Model.Context != null && Model.Context.Length > 100000)
            {
                await ToastService.Error("文本长度超过上限", "强烈建议使用链接显示图片，内嵌图片会导致性能严重下降。请控制文本量，额外的文字可以移动到关联文章中");
                return;
            }
            //调整时间
            Model.PubishTime = Model.PubishTime.AddHours(Model.PubishTime.Hour < 12 ? (12 - Model.PubishTime.Hour) : 0);
            if (Model.RealNewsTime != null)
            {
                Model.RealNewsTime = Model.RealNewsTime.Value.AddHours(Model.RealNewsTime.Value.Hour < 12 ? (12 - Model.RealNewsTime.Value.Hour) : 0);
            }
            var result = await Http.PostAsJsonAsync<CreateArticleViewModel>(ToolHelper.WebApiPath + "api/articles/createarticle", Model);
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                if (obj.Error == "该文章的名称与其他文章重复")
                {
                    ComplexForm.SetError<CreateArticleViewModel>(f => f.Name, "已经存在该名称的文章");
                }
                await ToastService.Error("创建文章失败", obj.Error);
            }
            else
            {
                await ToastService.Success("创建文章成功", "创建文章成功，等待审核通过");
                NavigationManager.NavigateTo("/articles/index/" + obj.Error, Model.Name, "fa fa-newspaper-o");
            }
        }
        catch
        {
            await ToastService.Error("创建文章失败", "发生了未预料的异常，请联系开发人员");
        }
    }

    private Task OnCardUploadMain(string url)
    {

        MainImagePath = url;
        Model.MainPicture = url;
        return Task.CompletedTask;
    }

    private Task OnCardUploadBack(string url)
    {
        BackImagePath = url;
        Model.BackgroundPicture = url;
        return Task.CompletedTask;
    }
    private Task OnCardUploadSmall(string url)
    {
        SmallBackImagePath = url;
        Model.SmallBackgroundPicture = url;
        return Task.CompletedTask;
    }

}

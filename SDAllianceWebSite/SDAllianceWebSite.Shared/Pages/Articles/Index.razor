@page "/articles/index/{Id}"


@inject HttpClient Http
@inject ExamineService _examineService
@inject ToastService? ToastService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

@inject DialogService DialogService

@if(string.IsNullOrWhiteSpace(Model.Name)==false)
{
    <Title Text="@Model.Name"></Title>
}


@if (string.IsNullOrWhiteSpace(Model.SmallBackgroundPicture) == false)
{
    <div id="web_bg" style="background-image: url(@Model.SmallBackgroundPicture)" class=" d-none  bg-d-lg-block bgimage-ison"></div>
}
@if (string.IsNullOrWhiteSpace(Model.BackgroundPicture) == false)
{
    <div id="web_bg" style="background-image: url(@Model.BackgroundPicture)" class=" d-none d-sm-block bgimage-ison"></div>
}


<div class="row">
    <div class="col-12 @(IsLargeScreen?" col-xl-9":"")">
        @if (isReady == false)
        {
            <div style="padding-right: 0;padding-left: 0;">
                <div class="  rounded shadow  ps-4 pe-4 pt-3 pb-3 bg-opacity rounded">
                    <SkeletonParagraph />
                    <hr class="m-2" />
                    <SkeletonTable />
                    <div class="mt-2">
                    </div>
                    <SkeletonTable />
                    <div class="mt-2">
                    </div>
                    <SkeletonTable />
                    <div class="mt-2">
                    </div>
                    <SkeletonTable />
                </div>
            </div>
        }
        else if (isNotFound == true)
        {
            <NotFoundArticle IsNeedLayput="true"></NotFoundArticle>
        }
        else
        {
            @if (Model.IsHidden == true)
            {
                <div class="alert alert-secondary  rounded shadow  rounded" role="alert">
                    当前文章处于隐藏状态，如果你看到了这个提示，请立即联系管理员
                </div>

            }
            @if (Model.DisambigId != 0)
            {
                <AlertTip Title="@Model.DisambigName" Type="AlertTip.AlertTipType.ArticleDisPlayDisambigTip" Url="@("/disambigs/index/" + Model.DisambigId)"></AlertTip>
            }

            <div class="  rounded shadow  bg-opacity pt-3 mb-4">
                <div class="row mt-2 ms-2 me-2" style="padding-right: 0;padding-left: 0;">

                    <img class="col-12 col-md-12 col-lg-12 mt-1 mb-4" src="@Model.MainPicture">
                    <div class="col-12 col-md-12 col-lg-12 mt-1 mb-2">
                        <h3 class="fw-bold text-center mt-4">@Model.Name</h3>

                        <p class="text-center" style="color: gray;margin-top:20px">
                            <i class="fa fa-calendar fa-fw "></i>
                            <span class="article-infor-text">@Model.CreateTime.ToString("yyyy-MM-dd")</span>&nbsp;&nbsp;&nbsp;
                            <i class="fa fa-eye fa-fw "></i>
                            <span class="article-infor-text">@(Model.ReaderCount + "次阅读")</span>&nbsp;&nbsp;&nbsp;
                            <i class="fa fa-user fa-fw"></i>
                            <span class="article-infor-text" @onclick="(() => OnUserClick())" style="cursor: pointer">@Model.LastEditUserName</span>
                            @if (IsSmallScreen)
                            {
                                <br />
                            }
                            else
                            {
                                <span>&nbsp; &nbsp; &nbsp;</span>
                            }
                            <i class="fa fa-commenting-o fa-fw "></i>
                            <span class="article-infor-text">@(Model.CommentCount + "条评论")&nbsp; &nbsp; &nbsp;</span>
                            <i class="fa fa-thumbs-o-up fa-fw "></i>
                            <span class="article-infor-text">@(Model.ThumbsUpCount + "人点赞")&nbsp; &nbsp; &nbsp;</span>

                        </p>
                    </div>
                    <div class="col-12 col-md-12 col-lg-12">
                        <hr />
                        <div class="mb-4 mt-4">

                            @if (isReady == true)
                            {
                                @if (string.IsNullOrWhiteSpace(Model.OriginalAuthor) == false && string.IsNullOrWhiteSpace(Model.OriginalLink) == false)
                                {

                                    <div class="alert alert-info  rounded shadow  rounded" role="alert">
                                        作者： <strong> @Model.OriginalAuthor</strong> &nbsp; 原文发表在<a href="@Model.OriginalLink" class="alert-link" style="word-wrap: break-word;word-break:break-all;" target="_blank">@Model.OriginalLink</a>
                                    </div>
                                }

                                if (Model.MainPageState == EditState.Preview || Model.MainState == EditState.Preview || Model.RelevancesState == EditState.Preview)
                                {
                                    <AlertTip Title="编辑文章" Type="AlertTip.AlertTipType.preview" Url="@("/articles/editarticle/" + Model.Id)" OnClickRevoke="OnRevoke"></AlertTip>
                                }
                                <div class="tui-editor-contents">
                                    @((MarkupString)Model.MainPage)
                                </div>


                                @if (IsLargeScreen == false)
                                {
                                    <ArticleOperationTip Authority="AsyncModel.Authority" IsEdit="Model.IsEdit" IsHidden="Model.IsHidden" Relevances="Model.Relevances" OnArticleClick="OnArticleClick" LastEditTime="Model.EditDate" IsThumbsUp="AsyncModel.IsThumbsUp"
                                                         IsLargeSreeen="IsLargeScreen" IsNormalSreeen="IsNormalScreen" IsSmallSreeen="IsSmallScreen" OnClickUrl="OnClickUrl" IsFavorited="IsUserFavorited"></ArticleOperationTip>
                                }

                            }
                        </div>
                    </div>
                </div>

            </div>
            @if (Model.CanComment)
            {
                <CommentListView OnPageChanged="OnCommentPageClick" Comments="ListComments" IsShowNotFound="false" IsSmallScreen="IsSmallScreen" CurrentUserRank="@CurrentUserRank" RelyCallBack="OnRely" IsAdmin="@IsAdmin" CanDeleted="CanDeleted" DeletedCallBack="OnDeleted"></CommentListView>
                <ReplyCommentTip CurrentUserRank="@CurrentUserRank" IsChild="false" ObjectId="@Model.Id.ToString()" Type="CommentType.CommentArticle" RelyCallBack="OnRely" IsAdmin="IsAdmin"></ReplyCommentTip>

            }
            else
            {
                <CloseCommentTip IsNeedLayput="true"></CloseCommentTip>
            }
        }
    </div>

    @if (IsLargeScreen)
    {
        <div class="col-xl-3">
            @if (string.IsNullOrWhiteSpace(Model.UserId) == false)
            {
                <UserInforTip Length="75" UserId="@Model.UserId"  OnClickUrl="OnClickUrl"></UserInforTip>
            }

            @if (IsLargeScreen)
            {
                <ArticleOperationTip OnClickUrl="OnClickUrl" Authority="AsyncModel.Authority" IsEdit="Model.IsEdit" IsHidden="Model.IsHidden" Relevances="Model.Relevances" OnArticleClick="OnArticleClick" LastEditTime="Model.EditDate" IsThumbsUp="AsyncModel.IsThumbsUp"
                                     IsLargeSreeen="IsLargeScreen" IsNormalSreeen="IsNormalScreen" IsSmallSreeen="IsSmallScreen"  IsFavorited="IsUserFavorited"></ArticleOperationTip>
            }
        </div>
    }
</div>



@code {
    private string id = "";
    [Parameter]
    public string Id
    {
        get { return id; }
        set
        {
            id = value;
            if(isFrist==false)
            {
                OnInitializedAsync();

            }
        }
    }
    public string steam { get; set; }
    public string MainPageHtml { get; set; }
    public int currentPage { get; set; } = 1;
    public string NoticeCard { get; set; } = "";
    public string CurrentUserRank { get; set; }
    bool isReady = false;
    bool isNotFound = false;
    bool isAsyncReady = false;

    public ArticleViewModel Model { get; set; } = new ArticleViewModel
    {
        Relevances = new List<RelevancesViewModel>(),
        MainPage = "# 123",
        Name = "SDAlliance_软萌"
    };

    public ArticleAsyncInforViewModel AsyncModel = new ArticleAsyncInforViewModel();
    public PagedResultDto<CommentViewModel> ListComments = new SDAllianceWebSite.Shared.Application.Dtos.PagedResultDto<CommentViewModel> { Data = new List<CommentViewModel>(), CurrentPage = 1, TotalCount = 0 };

    public bool IsUserFavorited { get; set; }
    public FavoriteFoldersViewModel UserFavoriteInfor { get; set; }


    #region 获取屏幕大小

    /// <summary>
    /// 获得/设置 IJSRuntime 实例
    /// </summary>
    [Inject]
    [System.Diagnostics.CodeAnalysis.NotNull]
    public IJSRuntime? JSRuntime { get; set; }



    public bool IsSmallScreen { get; set; }
    public bool IsNormalScreen { get; set; }
    public bool IsLargeScreen { get; set; }
    public bool IsAdmin { get; set; } = false;
    public bool CanDeleted { get; set; } = false;
    string LastLookName = "";
    bool isFrist = true;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    private JSInterop<Index>? Interop { get; set; }
    /// <summary>
    /// OnAfterRenderAsync 方法
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        try
        {
            await JS.InvokeAsync<string>("highlightAllCode");
        }
        catch
        {

        }

      
        if (firstRender)
        {
            Interop = new JSInterop<Index>(JSRuntime);
            await Interop.InvokeVoidAsync(this, null, "bb_layout", nameof(SetCollapsed));

            isFrist = false;

            //获取用户收藏夹相关信息 只需要获取一次
            var userState = await authenticationStateTask;
            var user = userState.User;
            if(user.Identity.IsAuthenticated)
            {
                string userId = string.Empty;
                foreach (var item in user.Claims)
                {
                    if (item.Type == "userid")
                    {
                        userId = item.Value;
                    }
                }
                await GetUserFavoriteInfor(userId);

            }
        }

    }

    /// <summary>
    /// 设置侧边栏收缩方法 客户端监控 window.onresize 事件回调此方法
    /// </summary>
    /// <returns></returns>
    [JSInvokable]
    public void SetCollapsed(int width)
    {
        if (IsSmallScreen != (width < 850))
        {
            IsSmallScreen = width < 850;
            StateHasChanged();
        }
        if (IsNormalScreen != (width >= 850 && width < 1500))
        {
            IsNormalScreen = width >= 850 && width < 1500;
            StateHasChanged();
        }
        if (IsLargeScreen != (width >= 1500))
        {
            IsLargeScreen = width >= 1500;
            StateHasChanged();
        }
    }
    #endregion

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isReady = false;
            isNotFound = false;
            //获取文章信息
            Model = await Http.GetFromJsonAsync<ArticleViewModel>(ToolHelper.WebApiPath + "api/articles/GetArticleView/" + Id);
            //判断文章名称是否为空 为空则跳转到主页
            if(string.IsNullOrWhiteSpace(Model.Name))
            {
                NavigationManager.NavigateTo("/articles/home", "文章", "fa fa-newspaper-o"); 
            }
            MainPageHtml = Model.MainPage;
            isReady = true;
            StateHasChanged();

            var userState = await authenticationStateTask;
            var user = userState.User;
            if (user.Identity.Name == Model.LastEditUserName || user.Identity.Name == Model.CreateUserName)
            {
                CurrentUserRank = "作者";
                CanDeleted = true;
            }
            if (user.IsInRole("Admin"))
            {
                IsAdmin = true;
                CanDeleted = true;
            }

            if (userState.User.Identity.IsAuthenticated)
            {
                try
                {
                    isAsyncReady = true;
                    //获取文章信息
                    AsyncModel = await Http.GetFromJsonAsync<ArticleAsyncInforViewModel>(ToolHelper.WebApiPath + "api/articles/GetArticleAsyncInfor/" + Id);
                }
                catch
                {
                    await ToastService.Error("获取与用户相关的文章信息失败", "请在确保网络正常后联系开发人员");
                }

                //判断文章是否被收藏
                await GetUserIsFavorited();
            }

            try
            {
                await OnCommentPageClick(1);
            }
            catch
            {
                await ToastService.Error("获取文章评论列表失败", "请在确保网络正常后联系开发人员");
            }
        }
        catch (Exception exc)
        {
            isReady = true;
            isNotFound = true;
            StateHasChanged();
        }

    }

    public async Task GetUserIsFavorited()
    {
        try
        {
            var userFavoriteInfor = await Http.GetFromJsonAsync<IsObjectInUserFavoriteFolderResult>(ToolHelper.WebApiPath + "api/favorites/IsObjectInUserFavoriteFolder/" + Model.Id + "/" + FavoriteObjectType.Article);
            if (userFavoriteInfor != null)
            {
                IsUserFavorited = userFavoriteInfor.Result;

                StateHasChanged();
            }

        }
        catch
        {
            await ToastService.Error("判断该词条是否被收藏失败", "发生了未预料的异常，请联系开发人员");
        }
    }
    public async Task GetUserFavoriteInfor(string id)
    {
        try
        {
            UserFavoriteInfor = await Http.GetFromJsonAsync<FavoriteFoldersViewModel>(ToolHelper.WebApiPath + "api/favorites/GetUserFavoriteFolders/" + id);
        }
        catch
        {
            await ToastService.Error("获取用户收藏夹失败", "发生了未预料的异常，请联系开发人员");
        }
    }

    private void UnEdit()
    {
        Model.IsEdit = false;
        StateHasChanged();
    }
    private void Edit()
    {
        Model.IsEdit = true;
        StateHasChanged();
    }

    private async void UnHidden()
    {
        try
        {

            var result = await Http.PostAsJsonAsync<HiddenArticleModel>(ToolHelper.WebApiPath + "api/articles/HiddenArticle", new HiddenArticleModel { Ids = new long[] { Model.Id }, IsHidden = false });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("显示文章失败", obj.Error);
            }
            else
            {
                await ToastService.Success("显示文章成功", "显示文章成功，离开此页面后可以请在后台恢复文章状态");
                Model.IsHidden = false;
                StateHasChanged();
            }
        }
        catch
        {
            await ToastService.Error("显示文章失败", "发生了未预料的异常，请联系开发人员");
        }
    }
    private async void Hidden()
    {
        try
        {
            var result = await Http.PostAsJsonAsync<HiddenArticleModel>(ToolHelper.WebApiPath + "api/articles/HiddenArticle", new HiddenArticleModel { Ids = new long[] { Model.Id }, IsHidden = true });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("隐藏文章失败", obj.Error);
            }
            else
            {
                await ToastService.Success("隐藏文章成功", "隐藏文章成功，离开此页面后可以请在后台恢复文章状态");
                Model.IsHidden = true;
                StateHasChanged();
            }
        }
        catch
        {
            await ToastService.Error("隐藏文章失败", "发生了未预料的异常，请联系开发人员");
        }
    }

    private async void UnThumbsUp()
    {
        try
        {

            var result = await Http.PostAsJsonAsync<ThumbsUpArticleModel>(ToolHelper.WebApiPath + "api/articles/ThumbsUpArticle", new ThumbsUpArticleModel { Id = Model.Id, IsThumbsUp = false });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("取消点赞文章失败", obj.Error);
            }
            else
            {
                //await ToastService.Success("取消点赞文章成功", "取消点赞文章成功");
                Model.ThumbsUpCount--;
                AsyncModel.IsThumbsUp = false;
                StateHasChanged();
            }
        }
        catch
        {
            await ToastService.Error("取消点赞文章失败", "发生了未预料的异常，请联系开发人员");
        }
    }
    private async void ThumbsUp()
    {
        try
        {
            var result = await Http.PostAsJsonAsync<ThumbsUpArticleModel>(ToolHelper.WebApiPath + "api/articles/ThumbsUpArticle", new ThumbsUpArticleModel { Id = Model.Id, IsThumbsUp = true });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("点赞文章失败", obj.Error);
            }
            else
            {
                //await ToastService.Success("点赞文章成功", "点赞文章成功");
                Model.ThumbsUpCount++;
                AsyncModel.IsThumbsUp = true;
                StateHasChanged();
            }
        }
        catch
        {
            await ToastService.Error("点赞文章失败", "发生了未预料的异常，请联系开发人员");
        }
    }


    public async void ViewAtOther(string url, string name)
    {
        if (string.IsNullOrWhiteSpace(url) == false)
        {
            NavigationManager.NavigateTo(url, name, "fa fa-link");
        }
        else
        {
            await ToastService.Error("该词条不存在", "无法找到词条：" + name + "，你也可以亲自创建该词条哦");
        }

    }

    public void OnUserClick()
    {
        NavigationManager.NavigateTo("/space/index/" + Model.UserId, Model.LastEditUserName, "fa fa-star-o");
    }

    public async Task OnArticleClick(int index)
    {
        if (index == 2)
        {
            NavigationManager.NavigateTo("/articles/editarticle/" + Model.Id, "编辑文章", "fa fa-edit");
        }
        else if (index == 3)
        {

            UnHidden();
        }
        else if (index == 4)
        {
            Hidden();
        }
        else if (index == 5)
        {

            UnThumbsUp();
        }
        else if (index == 6)
        {
            ThumbsUp();
        }
        else if (index == 7)
        {

            await OnUnFavoriteClick();
        }
        else if (index == 8)
        {
            await OnFavoriteClick();
        }
    }

    private async Task OnCommentPageClick(int pageIndex)
    {
        try
        {
            ListComments = await Http.GetFromJsonAsync<PagedResultDto<CommentViewModel>>(ToolHelper.WebApiPath + "api/comments/GetComments/" + (int)CommentType.CommentArticle + "/" + Id + "/" + pageIndex + "/8");
            StateHasChanged();
        }
        catch
        {
            await ToastService.Error("获取评论列表失败", "未知错误，请在确保网络正常后联系开发人员");
        }
    }

    private async Task OnRely()
    {
        Model.CommentCount++;
        await OnCommentPageClick(ListComments.CurrentPage);
    }
    private async Task OnDeleted()
    {
        await OnCommentPageClick(ListComments.CurrentPage);
    }

    public async void OnClickUrl(NavigateModel model)
    {
        try
        {
            NavigationManager.NavigateTo(model.Url, model.Title, model.Icon);
        }
        catch
        {
            await ToastService.Error("导航失败", "请尝试刷新页面");
        }
    }

    private async Task OnFavoriteClick()
    {
        //检查是否存在默认收藏夹
        if (UserFavoriteInfor == null || UserFavoriteInfor.Favorites == null || UserFavoriteInfor.Favorites.Count == 0)
        {
            await ToastService.Error("收藏词条失败", "无法获取收藏夹信息");
        }

        var favoriteFolderIds = UserFavoriteInfor.Favorites.Where(s => s.IsDefault == true).Select(s => s.Id).ToArray();
        if (favoriteFolderIds.Length == 0)
        {
            //没有默认收藏夹 进入选择收藏夹界面

            var option = new DialogOption()
            {
                Title = "选择收藏夹",
                ShowCloseButton = false
            };
            option.BodyTemplate = BootstrapDynamicComponent.CreateComponent<ChooseFavoriteFolderTip>(new KeyValuePair<string, object>[]
            {
                new(nameof(ChooseFavoriteFolderTip.UserFavoriteInfor),UserFavoriteInfor),
                new(nameof(ChooseFavoriteFolderTip.ObjectId), Model.Id),
                new(nameof(ChooseFavoriteFolderTip.Type), FavoriteObjectType.Article),
                new(nameof(ChooseFavoriteFolderTip.OnClickClose), EventCallback.Factory.Create(this, async () => await option.Dialog.Close())),
                new(nameof(ChooseFavoriteFolderTip.OnFavorite), EventCallback.Factory.Create(this, async () => { IsUserFavorited=true;StateHasChanged(); }))
            }).Render();
            await DialogService.Show(option);
        }
        else
        {
            //直接添加到默认收藏夹
            try
            {
                var result = await Http.PostAsJsonAsync<AddFavoriteObjectViewModel>(ToolHelper.WebApiPath + "api/favorites/AddFavoriteObject", new AddFavoriteObjectViewModel { FavoriteFolderIds = favoriteFolderIds, ObjectId = Model.Id, Type = FavoriteObjectType.Article });
                string jsonContent = result.Content.ReadAsStringAsync().Result;
                Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
                //判断结果
                if (obj.Successful == false)
                {
                    await ToastService.Error("收藏文章失败", obj.Error);
                }
                else
                {
                    await ToastService.Success("收藏文章成功", "收藏文章成功");
                    IsUserFavorited = true;
                    StateHasChanged();
                }
            }
            catch (Exception exc)
            {
                await ToastService.Error("收藏文章失败", "发生了未预料的异常，请联系开发人员");
            }
        }
    }

    private async Task OnUnFavoriteClick()
    {

        try
        {
            var result = await Http.PostAsJsonAsync<UnFavoriteObjectsModel>(ToolHelper.WebApiPath + "api/favorites/UnFavoriteObjects", new UnFavoriteObjectsModel { ObjectId = Model.Id, Type = FavoriteObjectType.Article });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("取消收藏文章失败", obj.Error);
            }
            else
            {
                await ToastService.Success("取消收藏文章成功", "收藏文章成功");
                IsUserFavorited = false;
                StateHasChanged();
            }
        }
        catch
        {
            await ToastService.Error("取消收藏文章失败", "发生了未预料的异常，请联系开发人员");
        }

    }

    [Inject]
    [NotNull]
    private SwalService? SwalService { get; set; }
    private async Task OnRevoke(Operation operation)
    {
        //确认
        var op = new SwalOption()
        {
            Title = "确认撤销编辑",
            Content = "撤销编辑后会删除数据，无法恢复，请谨慎操作",
            IsConfirm = true,
            Category = SwalCategory.Warning,
        };
        var ret = await SwalService.ShowModal(op);
        if (ret == false)
        {
            return;
        }
        //上传
        try
        {
            var result = await Http.PostAsJsonAsync<RevokeExamineModel>(ToolHelper.WebApiPath + "api/articles/RevokeExamine", new RevokeExamineModel { Id = Model.Id });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("撤销审核请求失败", obj.Error);
            }
            else
            {
                await ToastService.Success("撤销审核请求成功", "撤销审核请求成功");
                //修改各部分编辑状态
                Model.MainPageState = EditState.Normal;
                Model.MainState = EditState.Normal;
                Model.RelevancesState = EditState.Normal;
                Id = id;
            }
        }
        catch
        {
            await ToastService.Error("撤销审核请求失败", "发生了未预料的异常，请联系开发人员");
        }
    }

}

@inject HttpClient Http
@inject ToastService ToastService

@if (IsSmallScreen)
{
    <div class=" rounded shadow  bg-opacity rounded ps-3 pe-3 pt-3 pb-3 mb-2 mt-4" style="display: flex; flex-direction: row; justify-content: space-between;">
        <h4 class="fw-bold font-color" style="margin-bottom:auto;margin-top:auto;"><i class="fa fa-star"></i>&nbsp;&nbsp;友情链接</h4>
    </div>

    <div class="row">
        @for (int i = 0; i < Model.Count && i < ItemNum * 2; i++)
        {
            long temp = Model[i].Id;
            string tempName = Model[i].Name;
            <div class="col-6 col-md-3 mb-2 mt-2">
                <div class="rounded shadow bg-opacity rounded pb-1 h-100">
                    <FriendLinkCardView Icon="fa fa-codepen" Id="temp" Image="@Model[i].Image" IsSmallScreen="true"
                                     Name="@Model[i].Name" Url="@Model[i].Link"></FriendLinkCardView>
                </div>
            </div>
        }
    </div>

}
else
{
    <div class=" rounded shadow  bg-opacity rounded ps-4 pe-4 pt-3 pb-3 mt-4">
        <h4 class="fw-bold mb-4 font-color"><i class="fa fa-star"></i>&nbsp;&nbsp;友情链接</h4>
        @if (IsNormalScreen)
        {
            <div class="row">
                @for (int i = 0; i < Model.Count && i < ItemNum * 2; i++)
                {
                    long temp = Model[i].Id;
                    string tempName = Model[i].Name;
                <div class="col-6 col-md-3 mb-2">
                    <FriendLinkCardView Icon="fa fa-codepen" Id="temp" Image="@Model[i].Image" 
                                     Name="@Model[i].Name" Url="@Model[i].Link" ></FriendLinkCardView>
                </div>
                }
            </div>
        }
        else
        {
            <div class="row">
                @for (int i = 0; i < Model.Count && i < 12; i++)
                {
                    long temp = Model[i].Id;
                    string tempName = Model[i].Name;
                <div class="col-12 col-md-6 col-lg-2 mb-2">
                    <FriendLinkCardView Icon="fa fa-codepen" Id="temp" Image="@Model[i].Image"
                                     Name="@Model[i].Name" Url="@Model[i].Link" ></FriendLinkCardView>
                </div>
                }
            </div>
        }

    </div>
}


@code {
    int ItemNum = 4;

    public List<FriendLink> Model { get; set; } = new List<FriendLink>();

    [Parameter]
    public EventCallback<NavigateModel> OnClickUrl { get; set; }
    #region 获取屏幕大小

    /// <summary>
    /// 获得/设置 IJSRuntime 实例
    /// </summary>
    [Inject]
    [System.Diagnostics.CodeAnalysis.NotNull]
    public IJSRuntime JSRuntime { get; set; }



    public bool IsSmallScreen { get; set; }
    public bool IsNormalScreen { get; set; }
    public bool IsLargeScreen { get; set; }


    private JSInterop<FriendLinkListView> Interop { get; set; }
    /// <summary>
    /// OnAfterRenderAsync 方法
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            Interop = new JSInterop<FriendLinkListView>(JSRuntime);
            await Interop.InvokeVoidAsync(this, null, "bb_layout", nameof(SetCollapsed));


        }
    }

    /// <summary>
    /// 设置侧边栏收缩方法 客户端监控 window.onresize 事件回调此方法
    /// </summary>
    /// <returns></returns>
    [JSInvokable]
    public void SetCollapsed(int width)
    {
        if (IsSmallScreen != (width < 768))
        {
            IsSmallScreen = width < 768;

            StateHasChanged();
        }
        if (IsNormalScreen != (width >= 768 && width < 1517))
        {
            IsNormalScreen = width >= 768 && width < 1517;

            StateHasChanged();
        }
        if (IsLargeScreen != (width >= 1517))
        {
            IsLargeScreen = width >= 1517;
            StateHasChanged();
        }
    }
    #endregion


    protected override async Task OnInitializedAsync()
    {
        if (Model.Count == 0)
        {
            try
            {
                //获取主页信息
                Model = await Http.GetFromJsonAsync<List<FriendLink>>(ToolHelper.WebApiPath + "api/home/GetHomeFriendLinksView");
                StateHasChanged();
            }
            catch (Exception exc)
            {
                await ToastService.Error("无法连接到服务器", "请确保网络正常后联系开发人员");
            }
        }

    }


    public async void ViewAll()
    {
      /*  await OnClickUrl.InvokeAsync(new NavigateModel
        {
            Url = Url,
            Title = UrlName,
            Icon = UrlIcon
        });*/
    }



}

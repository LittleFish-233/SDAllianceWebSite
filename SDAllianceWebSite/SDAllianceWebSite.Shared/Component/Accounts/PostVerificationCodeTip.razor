@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ToastService ToastService
@inject IJSRuntime JS
@inject HttpClient Http


@if (IsFrist)
{
    <Button Color="Color.Primary" IsOutline="false" IsDisabled="true" Icon="fa fa-spin fa-spinner" Text="获取验证码"></Button>
}
else
{
    @if (isPost)
    {
        <Button Color="Color.Primary" IsOutline="false" IsDisabled="true" Text="@("重新发送（"+seconds.ToString()+"秒）")"></Button>
    }
    else
    {
        <Button Color="Color.Primary" IsOutline="true" Text="获取验证码" @onclick="OnVerification" IsAsync="true" @ref="button1"></Button>
    }
}



@code {
    [Parameter]
    public string Email { get; set; }
    [Parameter]
    public string LoginKey { get; set; }
    [Parameter]
    public string UserName { get; set; }
    [Parameter]
    public Models.SMSType SmsType { get; set; }
    [Parameter]
    public SendType SendType { get; set; }

    private bool isPost { get; set; }

    private bool IsSuccess { get; set; }

    public int seconds { get; set; }
    [Parameter]
    public bool IsFrist { get; set; } = true;
    Button button1;

    System.Threading.Timer mytimer;
    private DotNetObjectReference<PostVerificationCodeTip> objRef;
    protected override async Task OnInitializedAsync()
    {
        if(IsFrist == true)
        {
            await OnVerification();
        }
        else
        {
            isPost = true;
            seconds = 60;
            //启动定时器
            mytimer = new System.Threading.Timer(new System.Threading.TimerCallback(Send), null, 0, 1000);

            StateHasChanged();
        }
    }

    public async Task OnVerification()
    {
        await OnChecked("", "");
    }

    [JSInvokable]
    public async Task OnChecked(string token, string randstr)
    {

        //尝试获取验证码
        try
        {
            var result = await Http.PostAsJsonAsync<PostVerificationCodeModel>(ToolHelper.WebApiPath + "api/account/PostVerificationCode", new PostVerificationCodeModel { Mail = Email, Randstr = randstr, Token = token, UserName = UserName,LoginKey=LoginKey, SMSType = SmsType, SendType= SendType });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == true)
            {
                IsFrist = false;
                isPost = true;
                seconds = 60;
                //启动定时器
                mytimer = new System.Threading.Timer(new System.Threading.TimerCallback(Send), null, 0, 1000);

                StateHasChanged();
            }
            else
            {
                await ToastService.Error("发送验证码失败", obj.Error);
                IsFrist = false;
                isPost = false;
                IsSuccess = false;
                StateHasChanged();

                return;
            }
        }
        catch
        {
            await ToastService.Error("发送验证码失败", "发生了未预料的异常，请联系开发人员");
            IsFrist = false;
            isPost = false;
            IsSuccess = false;
            StateHasChanged();
            return;
        }

    }


    public async void Send(object o)
    {
        await InvokeAsync(() =>
        {

            seconds--;
            if (seconds <= 0)
            {
                isPost = false;
                mytimer.Dispose();
            }
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        mytimer?.Dispose();
        objRef?.Dispose();
    }

    [JSInvokable]
    public Task OnCancel()
    {
        IsFrist = false;
        isPost = false;
        IsSuccess = false;
        return Task.CompletedTask;
    }
}

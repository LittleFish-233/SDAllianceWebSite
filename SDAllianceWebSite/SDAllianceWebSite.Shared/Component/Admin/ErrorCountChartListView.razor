@inject HttpClient Http
@inject ToastService? ToastService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<Table TItem="ListErrorCountAloneModel" IsPagination="true" PageItemsSource="@PageItems" OnQueryAsync="@OnQueryBasicAsync" SearchModel="@searchModel" ShowSearch="true" @ref="TableRows"
       SelectedRows="@SelectedRows" IsMultipleSelect="true" IsStriped=true
       ShowExportButton="true" ShowToolbar="true" ShowDefaultButtons="false" FixedExtendButtonsColumn="true">
    <TableColumns>
        <TableColumn @bind-Field="@context.Id" Sortable="true" DefaultSort="true" DefaultSortOrder="@SortOrder.Desc" Fixed="true" Width="80" />
        <TableColumn @bind-Field="@context.Text" Searchable="true" Sortable="true" Width="200" AllowTextWrap="true" />
        <TableColumn @bind-Field="@context.LastUpdateTime" Sortable="true" Width="150" AllowTextWrap="true" />
    </TableColumns>
</Table>

@code {
    [NotNull]
    private Table<ListErrorCountAloneModel>? TableRows { get; set; }
    private List<ListErrorCountAloneModel> SelectedRows { get; set; } = new();

    public ListErrorCountsViewModel ListModel { get; set; } = new ListErrorCountsViewModel { ErrorCounts = new List<ListErrorCountAloneModel>() };

    private ListErrorCountAloneModel searchModel { get; set; } = new ListErrorCountAloneModel();

    private IEnumerable<int> PageItems => new int[] { 10, 20, 40, 80, 200, 5000 };


    private async Task<QueryData<ListErrorCountAloneModel>> OnQueryBasicAsync(QueryPageOptions options)
    {
        try
        {
            options.Filters = new List<IFilterAction>();
            options.Searchs = new List<IFilterAction>();

            var result = await Http.PostAsJsonAsync<ErrorCountsPagesInfor>(ToolHelper.WebApiPath + "api/admin/GetErrorCountList", new ErrorCountsPagesInfor { SearchModel = searchModel, Options = options });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            return JsonSerializer.Deserialize<QueryData<ListErrorCountAloneModel>>(jsonContent, ToolHelper.options);
        }
        catch (Exception exc)
        {
            await ToastService.Error("无法获取评论列表", "未知异常，请在确保网络正常后联系开发人员");
            return new QueryData<ListErrorCountAloneModel>();
        }
    }
}

@inject HttpClient Http
@inject ToastService? ToastService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<Table TItem="ListFileAloneModel" IsPagination="true" PageItemsSource="@PageItems" OnQueryAsync="@OnQueryBasicAsync" SearchModel="@searchModel" ShowSearch="true" @ref="TableRows"
       ShowExtendButtons="true" ExtendButtonColumnWidth="70" SelectedRows="@SelectedRows" IsMultipleSelect="true" IsStriped=true
       ShowExportButton="true" ShowToolbar="true" ShowDefaultButtons="false" FixedExtendButtonsColumn="true">
    <TableColumns>
        <TableColumn @bind-Field="@context.Id" Sortable="true" DefaultSort="true" DefaultSortOrder="@SortOrder.Desc" Fixed="true" Width="80" />
        <TableColumn @bind-Field="@context.FileName" Searchable="true" Sortable="true" Width="200"  AllowTextWrap="true"/>
        <TableColumn @bind-Field="@context.FileSize" Sortable="true" Width="100"  AllowTextWrap="true"/>
        <TableColumn @bind-Field="@context.UploadTime" AllowTextWrap="true" Width="170" />

        <TableColumn @bind-Field="@context.UserId" Searchable="true" Sortable="true" Width="200"  AllowTextWrap="true"/>
    </TableColumns>
    <RowButtonTemplate>
        <TableCellButton Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-database" Text="查看" IsAsync="true" OnClickCallback="@(() => LookFile( context.FileName))" />
    </RowButtonTemplate>
</Table>

@code {
    [NotNull]
    private Table<ListFileAloneModel>? TableRows { get; set; }
    private List<ListFileAloneModel> SelectedRows { get; set; } = new();

    public ListFilesViewModel ListModel { get; set; } = new ListFilesViewModel { Files = new List<ListFileAloneModel>() };

    private ListFileAloneModel searchModel { get; set; } = new ListFileAloneModel();

    private IEnumerable<int> PageItems => new int[] { 10, 20, 40, 80, 200, 5000 };


    private async Task<QueryData<ListFileAloneModel>> OnQueryBasicAsync(QueryPageOptions options)
    {
        try
        {
            options.Filters = new List<IFilterAction>();
            options.Searchs = new List<IFilterAction>();

            var result = await Http.PostAsJsonAsync<FilesPagesInfor>(ToolHelper.WebApiPath + "api/admin/GetFileList", new FilesPagesInfor { SearchModel = searchModel, Options = options });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            return JsonSerializer.Deserialize<QueryData<ListFileAloneModel>>(jsonContent, ToolHelper.options);
        }
        catch (Exception exc)
        {
            await ToastService.Error("无法获取评论列表", "未知异常，请在确保网络正常后联系开发人员");
            return new QueryData<ListFileAloneModel>();
        }
    }

    private async Task LookFile(string Url)
    {
        await JS.InvokeAsync<string>("openNewPage", Url);
    }

}

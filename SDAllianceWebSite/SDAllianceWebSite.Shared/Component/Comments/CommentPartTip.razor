@inject HttpClient Http
@inject ToastService? ToastService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@using System.Text.Json

<style>
    /*评论Markdown样式*/
    .comment-text-markdown .tui-editor-contents {
        font-weight: 300;
    }

        .comment-text-markdown .tui-editor-contents p {
            font-size: 19px;
        }
</style>
<div class=" ps-4 pe-4 pt-3 mb-3 @(IsChild ? "comment-layout-child" : "comment-layout") comment-layout-transition div-shadow rounded bg-opacity" style="cursor:default">
    <div class="new-row-warp no-margin">
        <div @onclick="OnUserClick" style="cursor:pointer">
            <img class="shadow -sm" src="@Model.UserImage" style="height: 60px;width: 60px;border-radius: 50%;" />
        </div>
        <div class="comment-tx-div">
            <div class="new-row-warp no-margin">
                <div class="comment-username" @onclick="OnUserClick" style="cursor:pointer">@Model.UserName</div>
                @if (string.IsNullOrWhiteSpace(Model.Rank) == false)
                {
                    string[] temp = Model.Rank.Split(",");
                    foreach (var item in temp)
                    {
                        <div class="comment-tag">@item</div>}
                }
            </div>
            <div class="comment-time">@Model.CommentTime.ToString("yyyy-MM-d H:mm")</div>
        </div>
        <div class="mt-2 col-12 no-padding comment-text-markdown">
            <div class="tui-editor-contents">
                @((MarkupString)(ReplyTip+Model.Text))
            </div>
        </div>
        <div class="col-12 no-padding">
            <AuthorizeView>
                <Authorized>

                    @if (IsReplying)
                    {
                        <button class="comment-reply comment-reply-color mb-3" style="float: right;" @onclick="OnUnReplyClick">取消回复</button>
                    }
                    else
                    {
                        <button class="comment-reply comment-reply-color mb-3" style="float: right;" @onclick="OnReplyClick">回复</button>
                    }


                    @if (CanDeleted)
                    {
                        <button class="comment-reply comment-reply-color mb-3" style="float: right;" @onclick="OnDeleteClick">删除</button>
                    }
                </Authorized>
            </AuthorizeView>

        </div>

        @if (Deepth < MaxDeepth)
        {
            if (IsReplying)
            {
                <ReplyCommentTip ObjectId="@ObjectId" IsChild="IsChild" Type="CommentType.ReplyComment" RelyCallBack="OnRely" CurrentUserRank="@CurrentUserRank" IsAdmin="IsAdmin"></ReplyCommentTip>
            }
        @foreach (var item in Model.InverseParentCodeNavigation)
        {

            <CommentPartTip Model="item" IsChild="true" CurrentUserRank="@CurrentUserRank" RelyCallBack="OnRely_Comment" IsAdmin="IsAdmin" IsSmallScreen="IsSmallScreen"
                            Deepth="Deepth+1" ParentCommentUserName="@Model.UserName" CanDeleted="@CanDeleted" DeletedCallBack="DeletedCallBack"></CommentPartTip>
        }
    }

    </div>
</div>
@if (Deepth >= MaxDeepth)
{
    @if (IsReplying)
    {
        <ReplyCommentTip ObjectId="@ObjectId" IsChild="IsChild" Type="CommentType.ReplyComment" RelyCallBack="OnRely" CurrentUserRank="@CurrentUserRank" IsAdmin="IsAdmin"></ReplyCommentTip>
    }
    @foreach (var item in Model.InverseParentCodeNavigation)
    {
        <CommentPartTip Model="item" IsChild="true" CurrentUserRank="@CurrentUserRank" RelyCallBack="OnRely_Comment" IsAdmin="IsAdmin" IsSmallScreen="IsSmallScreen"
                        Deepth="Deepth+1" ParentCommentUserName="@Model.UserName" CanDeleted="@CanDeleted" DeletedCallBack="DeletedCallBack"></CommentPartTip>
    }
}

@code {
    [Parameter]
    public CommentViewModel Model { get; set; }

    [Parameter]
    public bool IsChild { get; set; }
    [Parameter]
    public bool IsSmallScreen { get; set; }
    [Parameter]
    public bool IsAdmin { get; set; }
    [Parameter]
    public EventCallback RelyCallBack { get; set; }

    [Parameter]
    public string ParentCommentUserName { get; set; }

    public long LastId { get; set; }

    [Parameter]
    public bool CanDeleted { get; set; }

    [Parameter]
    public string CurrentUserRank { get; set; }

    [Parameter]
    public int Deepth { get; set; }

    private int MaxDeepth { get { return IsSmallScreen ? 2 : 5; } }

    bool isRead = false;

    [Parameter]
    public EventCallback DeletedCallBack { get; set; }

    private bool IsReplying { get; set; }

    private string StringMarked { get; set; }

    public string ReplyTip { get { return Deepth > MaxDeepth ? "回复@" + ParentCommentUserName + "：\n" : ""; } }


    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private string ObjectId
    {
        get
        {
            return Model.Id.ToString();
        }
    }

    public void OnReplyClick()
    {
        IsReplying = true;
        StateHasChanged();
    }

    public void OnUnReplyClick()
    {
        IsReplying = false;
        StateHasChanged();
    }

    public void OnLoginClick()
    {
        NavigationManager.NavigateTo("/account/longin");
    }

    public async Task OnRely()
    {
        //这是回复组件的事件回调
        IsReplying = false;
        await RelyCallBack.InvokeAsync();
    }

    public async Task OnRely_Comment()
    {
        //这是级联传递的事件回调
        await RelyCallBack.InvokeAsync();
    }

    public void OnUserClick()
    {
        if (Model != null)
        {
            NavigationManager.NavigateTo("/space/index/" + Model.ApplicationUserId, Model.UserName, "fa fa-star-o");
        }
    }

    int count = 0;
    /// <summary>
    ///
    /// </summary>
    /// <param name="item"></param>
    private async Task OnDeleteClick()
    {

        //调用API
        try
        {
            count++;
            if (count < 2)
            {
                await ToastService.Error("你确定要删除这条评论吗？", "确认删除请再次点击删除按钮");
                return;
            }

            var result = await Http.PostAsJsonAsync<DeleteCommentModel>(ToolHelper.WebApiPath + "api/comments/UserDeleteComment", new DeleteCommentModel { Ids = new long[] { Model.Id } });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            var obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);

            if (obj.Successful == false)
            {
                await ToastService.Error("删除评论失败", obj.Error);
            }
            else
            {

                await ToastService.Success("删除评论成功", "删除评论成功");
                await DeletedCallBack.InvokeAsync();
            }
        }
        catch (Exception exc)
        {
            await ToastService.Error("删除评论失败", "未知异常，请在确保网络正常后联系开发人员");
        }
    }
}

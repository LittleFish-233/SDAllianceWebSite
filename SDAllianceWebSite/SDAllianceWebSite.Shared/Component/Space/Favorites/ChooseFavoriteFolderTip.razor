@inject ToastService ToastService

@inject HttpClient Http
    <style>
        .modal-footer {
            display: none;
        }
    </style>

<div>
    @if (isReady)
    {
        <CheckboxList TValue="IEnumerable<long>" @bind-Value="@Value1" Items="@Items1" ShowLabel="true" DisplayText="选择要保存到的收藏夹" IsVertical="true" ></CheckboxList>

    }

    <div class="mt-3" style="display: flex; justify-content: space-between;">
        <Button Color="Color.Danger" Icon="fa fa-close" @onclick="@(()=>OnClickClose.InvokeAsync())" IsAsync="true" Text="放弃"></Button>
        <Button Color="Color.Success" Icon="fa fa-check" class="me-1" @onclick="OnFavorited" IsAsync="true" Text="收藏"></Button>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback OnClickClose { get; set; }
    [Parameter]
    public EventCallback OnFavorite { get; set; }
    [Parameter]
    public long ObjectId { get; set; }
    [Parameter]
    public FavoriteObjectType Type { get; set; }
    [Parameter]
    public FavoriteFoldersViewModel UserFavoriteInfor { get; set; }

    [NotNull]
    private List<SelectedItem>? Items1 { get; set; } = new List<SelectedItem>();

    public string Text { get; set; }
    private IEnumerable<long> Value1 { get; set; }
    bool isReady = false;

    protected override async Task OnInitializedAsync()
    {
        //序列化收藏夹
        foreach(var item in UserFavoriteInfor.Favorites)
        {
            Items1.Add(new SelectedItem
            {
                Text = item.Name,
                Value = item.Id.ToString()
            });
        }
        isReady = true;
        StateHasChanged();
    }


    public async Task OnFavorited()
    {
        if(Value1==null||Value1.Any()==false)
        {
            await ToastService.Error("请选择要保存到的收藏夹", "请选择要保存到的收藏夹");
            return;
        }
        try
        {
            var result = await Http.PostAsJsonAsync<AddFavoriteObjectViewModel>(ToolHelper.WebApiPath + "api/favorites/AddFavoriteObject", new AddFavoriteObjectViewModel { FavoriteFolderIds = Value1?.ToArray()??new long[] { }, ObjectId = ObjectId, Type = Type });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            Result obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);
            //判断结果
            if (obj.Successful == false)
            {
                await ToastService.Error("收藏失败", obj.Error);
                return;
            }
            else
            {
                await ToastService.Success("收藏成功", "收藏词条成功");
                await OnFavorite.InvokeAsync();
            }
        }
        catch (Exception exc)
        {
            await ToastService.Error("收藏失败", "发生了未预料的异常，请联系开发人员");
            return;
        }
        await OnClickClose.InvokeAsync();
    }
}

@inject IAuthService AuthService
@inject HttpClient Http
@inject ToastService? ToastService
<div class="">
    <div class="mb-4" style="padding-right: 0;padding-left: 0;">
        <div class=" rounded shadow -lg p-4 bg-opacity">
            <h3 class="fw-bold">@Title</h3>
            <h5 class="text-truncate mb-4 fw-bold">@Subtitle</h5>
            <hr />
            <Table TItem="ListFavoriteFolderAloneModel" IsPagination="true" PageItemsSource="@PageItems" OnQueryAsync="@OnQueryBasicAsync" SearchModel="@searchModel" ShowSearch="true" @ref="TableRows"
                   ShowExtendButtons="true" ExtendButtonColumnWidth="180" SelectedRows="@SelectedRows" IsMultipleSelect="true" IsStriped=true
                   ShowExportButton="true" ShowToolbar="true" ShowDefaultButtons="false" FixedExtendButtonsColumn="true">
                <TableToolbarTemplate>
                    <TableToolbarButton TItem="ListFavoriteFolderAloneModel" Color="Color.Success" Icon="fa fa-plus" Text="添加" OnClickCallback="AddFavoriteFolder" IsAsync="true" />
                    <TableToolbarButton TItem="ListFavoriteFolderAloneModel" Color="Color.Info" Icon="fa fa-link" Text="设置默认" OnClickCallback="OnDefaultClick" IsAsync="true" />
                    <TableToolbarButton TItem="ListFavoriteFolderAloneModel" Color="Color.Primary" Icon="fa fa-unlink" Text="取消默认" OnClickCallback="OnUnDefaultClick" IsAsync="true" />
                    <TableToolbarButton TItem="ListFavoriteFolderAloneModel" Color="Color.Danger" Icon="fa fa-trash" Text="删除" OnClickCallback="OnDeleteClick" IsAsync="true" />
                </TableToolbarTemplate>
                <TableColumns>
                    <TableColumn @bind-Field="@context.Name" Searchable="true" Sortable="true" Width="100" />
                    <TableColumn @bind-Field="@context.BriefIntroduction" Sortable="true" Width="200" AllowTextWrap="true"/>
                    <TableColumn @bind-Field="@context.Count" Searchable="true" AllowTextWrap="true" Width="120" />
                    <TableColumn @bind-Field="@context.CreateTime" AllowTextWrap="true" Width="100" FormatString="yyyy-MM-dd"/>

                    <TableColumn @bind-Field="@context.IsDefault" Sortable="true" ComponentType="@typeof(Switch)" Width="110" />
                </TableColumns>
                <RowButtonTemplate>
                    <TableCellButton Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-edit" Text="管理" IsAsync="true" OnClickCallback="@(() => OnRowManageClick(context.Id,context.Name))" />
                    <TableCellButton Size="Size.ExtraSmall" Color="Color.Primary" Icon="fa fa-exchange" Text="切换默认" IsAsync="true" OnClickCallback="@(() => OnRowEditIsDefaultClick(new long[] { context.Id }, !context.IsDefault, true))" />
                    <TableCellButton Size="Size.ExtraSmall" Color="Color.Danger" Icon="fa fa-trash" Text="删除" IsAsync="true" OnClickCallback="@(() =>  OnRowDeleteClick(new long[] { context.Id } ,true))" />
                </RowButtonTemplate>
            </Table>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public string Subtitle { get; set; }
    [Parameter]
    public string Uri { get; set; }
    [Parameter]
    public EventCallback<NavigateModel> OnClickUrl { get; set; }


    [NotNull]
    private Table<ListFavoriteFolderAloneModel>? TableRows { get; set; }
    private List<ListFavoriteFolderAloneModel> SelectedRows { get; set; } = new();

    public ListFavoriteFoldersInforViewModel InforModel { get; set; } = new ListFavoriteFoldersInforViewModel();
    public ListFavoriteFoldersViewModel ListModel { get; set; } = new ListFavoriteFoldersViewModel { FavoriteFolders = new List<ListFavoriteFolderAloneModel>() };

    private ListFavoriteFolderAloneModel searchModel { get; set; } = new ListFavoriteFolderAloneModel();

    private IEnumerable<int> PageItems => new int[] { 10, 20, 40, 80, 200, 5000 };

    private async Task<QueryData<ListFavoriteFolderAloneModel>> OnQueryBasicAsync(QueryPageOptions options)
    {
        try
        {
            options.Filters = new List<IFilterAction>();
            options.Searchs = new List<IFilterAction>();

            var result = await Http.PostAsJsonAsync<FavoriteFoldersPagesInfor>(ToolHelper.WebApiPath + "api/favorites/GetFavoriteFolderList", new FavoriteFoldersPagesInfor { Options=options,SearchModel = searchModel, UserId = Id });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            return JsonSerializer.Deserialize<QueryData<ListFavoriteFolderAloneModel>>(jsonContent, ToolHelper.options);
        }
        catch (Exception exc)
        {
            await ToastService.Error("无法获取收藏夹列表", "未知异常，请在确保网络正常后联系开发人员");
            return new QueryData<ListFavoriteFolderAloneModel>();
        }
    }

    private async Task OnRowManageClick(long id,string name)
    {
        await OnClickUrl.InvokeAsync(new NavigateModel
        {
            Title = "管理收藏夹",
            Icon = "fa fa-folder-open",
            Url = "/space/EditSpaceFavoriteObjects/" + id + "/" + ToolHelper.Base64EncodeName(name) + "/" + Uri
        });
    }


    private async Task OnRowEditIsDefaultClick(long[] ids, bool isDefault, bool showMessage)
    {
        string tempString = isDefault == true ? "默认" : "取消默认";
        //调用API
        try
        {
            var result = await Http.PostAsJsonAsync<SetDefaultFavoriteFolderModel>(ToolHelper.WebApiPath + "api/favorites/UserSetFavoriteFolderDefault", new SetDefaultFavoriteFolderModel { Ids = ids, IsDefault = isDefault });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            var obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);



            if (obj.Successful == false)
            {
                await ToastService.Error(tempString + "收藏夹失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success(tempString + "收藏夹成功", tempString + "收藏夹成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch
        {
            await ToastService.Error(tempString + "收藏夹失败", "未知异常，请在确保网络正常后联系开发人员");
        }
    }

    private async Task OnDefaultClick(IEnumerable<ListFavoriteFolderAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改收藏夹状态", "请选中收藏夹");
            return;
        }

        await OnRowEditIsDefaultClick(items.Select(s => s.Id).ToArray(), true, false);

        await ToastService.Success("设置默认收藏夹成功", "设置默认收藏夹成功");
        await TableRows.QueryAsync();
    }
    private async Task OnUnDefaultClick(IEnumerable<ListFavoriteFolderAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有修改收藏夹状态", "请选中收藏夹");
            return;
        }

        await OnRowEditIsDefaultClick(items.Select(s => s.Id).ToArray(), false, false);

        await ToastService.Success("取消默认收藏夹成功", "取消默认收藏夹成功");
        await TableRows.QueryAsync();
    }

    private async Task OnRowDeleteClick(long[] ids, bool showMessage)
    {
        //调用API
        try
        {
            var result = await Http.PostAsJsonAsync<DeleteFavoriteFoldersModel>(ToolHelper.WebApiPath + "api/favorites/UserDeleteFavoriteFolder", new DeleteFavoriteFoldersModel { Ids = ids });
            string jsonContent = result.Content.ReadAsStringAsync().Result;
            var obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);

            if (obj.Successful == false)
            {
                await ToastService.Error("删除收藏夹失败", obj.Error);
            }
            else
            {
                if (showMessage)
                {
                    await ToastService.Success("删除收藏夹成功", "删除收藏夹成功");
                    await TableRows.QueryAsync();
                }
            }
        }
        catch (Exception exc)
        {
            await ToastService.Error("删除收藏夹失败", "未知异常，请在确保网络正常后联系开发人员");
        }
    }

    private async Task OnDeleteClick(IEnumerable<ListFavoriteFolderAloneModel> items)
    {
        if (items.Count() == 0)
        {
            await ToastService.Information("没有删除收藏夹", "请选中收藏夹");
            return;
        }

        await OnRowDeleteClick(items.Select(s => s.Id).ToArray(), false);

        await ToastService.Success("删除收藏夹成功", "删除收藏夹成功");
        await TableRows.QueryAsync();
    }


    [Inject]
    [NotNull]
    private DialogService? DialogService { get; set; }
    public async Task AddFavoriteFolder(IEnumerable<ListFavoriteFolderAloneModel> e)
    {
        CreateFavoriteFolderViewModel model = new CreateFavoriteFolderViewModel();

        var items = EditorItem<CreateFavoriteFolderViewModel>.GenerateEditorItems();

        var option = new EditDialogOption<CreateFavoriteFolderViewModel>()
        {
            Title = "创建收藏夹",
            Model = model,
            Items = items,
            OnCloseAsync = () =>
            {
                //Trace.Log("关闭按钮被点击");
                return Task.CompletedTask;
            },
            OnSaveAsync = async context =>
            {
                try
                {
                    var result = await Http.PostAsJsonAsync<CreateFavoriteFolderViewModel>(ToolHelper.WebApiPath + "api/favorites/CreateFavoriteFolder", (CreateFavoriteFolderViewModel)context.Model);
                    string jsonContent = result.Content.ReadAsStringAsync().Result;
                    var obj = JsonSerializer.Deserialize<Result>(jsonContent, ToolHelper.options);



                    if (obj.Successful == false)
                    {
                        await ToastService.Error("创建收藏夹失败", obj.Error);
                        return false;
                    }
                    else
                    {

                        await ToastService.Success("创建收藏夹成功", "创建收藏夹成功");
                        await TableRows.QueryAsync();
                        return true;
                    }

                }
                catch (Exception exc)
                {
                    await ToastService.Error("创建收藏夹失败", "未知异常，请在确保网络正常后联系开发人员");
                    return false;
                }



            }
        };

        await DialogService.ShowEditDialog(option);
    }
}
